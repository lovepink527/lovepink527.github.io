<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lovepink</title>
  
  <subtitle>热爱可抵岁月漫长</subtitle>
  <link href="https://lovepink527.github.io/atom.xml" rel="self"/>
  
  <link href="https://lovepink527.github.io/"/>
  <updated>2022-01-16T02:03:37.671Z</updated>
  <id>https://lovepink527.github.io/</id>
  
  <author>
    <name>姜慧慧</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react进阶知识</title>
    <link href="https://lovepink527.github.io/2022/01/16/react%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/"/>
    <id>https://lovepink527.github.io/2022/01/16/react%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/</id>
    <published>2022-01-16T02:03:06.000Z</published>
    <updated>2022-01-16T02:03:37.671Z</updated>
    
    <content type="html"><![CDATA[<p>一、组件通信</p><ol><li>父组件传递数据给儿组件 props接收传递给组件的数据</li></ol><ul><li><p>传递数据： 给组件标签添加属性</p></li><li><p>接收数据： 函数组件通过参数props接收数据，类组件通过this.props接收数据</p><span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hell0 name=<span class="string">&quot;jack&quot;</span> age=&#123;<span class="number">19</span>&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(props)</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>接收到数据：&#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>接收到的数据： &#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li><li><p>props只能接收不能修改</p></li><li><p>注意： 使用类组件时，如果写了构造函数，应该将props传递给super(),否则,无法在构造函数中获取props</p></li><li><p>可以传递任何数据</p></li></ul><ol start="2"><li>子组件传递数据给父组件 回调函数</li></ol><ul><li>父组件提供一个回调函数（用于接收数据）</li><li>将该函数作为属性的值，传递给子组件</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    getChildMsg = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;接收到子组件数据&#x27;</span>,msg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                子组件： <span class="tag">&lt;<span class="name">Child</span> <span class="attr">getMsg</span>=<span class="string">&#123;this.getChildMsg&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">childMsg</span>: <span class="string">&#x27;React&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.getMsg(<span class="built_in">this</span>.state.childMsg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                子组件： <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>兄弟组件</li></ol><ul><li>将共享状态提升到最近的父组件，由公共父组件管理这个状态</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    子组件1： <span class="tag">&lt;<span class="name">Child1</span> <span class="attr">getMsg</span>=<span class="string">&#123;this.state.count&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    子组件2：<span class="tag">&lt;<span class="name">Child2</span> <span class="attr">getMsg</span>=<span class="string">&#123;this.handleClick&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器： &#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">props.count</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.props.getMsg()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    子组件： <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><ol start="4"><li>countext</li></ol><ul><li>作用： 跨组件传递数据</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 调用React.createContext()创建Provider（提供数据）和Consumer (消费数据)两个组件。</span></span><br><span class="line"><span class="keyword">const</span> &#123;Provider,Consumer&#125; = React.createContext()</span><br><span class="line"><span class="comment">//2. 使用Provider组件作为父节点</span></span><br><span class="line"><span class="comment">//3. 设置value属性，表示要传递的数据</span></span><br><span class="line">&lt;Provider value=<span class="string">&quot;pink&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Child1</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/Provider&gt;</span><br><span class="line"><span class="comment">//4. 调用Consumer组件接收数据</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;data =&gt; <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">const</span> &#123;Provider,Consumer&#125; = React.createContext()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&quot;pink&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Node</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>= props &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;node&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SubNode</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubNode</span> </span>= props &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=&quot;subnode&quot;&gt;</span><br><span class="line">                &lt;Consumer&gt;</span><br><span class="line">                    &#123;data =&gt; &lt;span&gt;&#123;data&#125;&lt;span&gt;&#125;</span><br><span class="line">                &lt;/Consumer&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="5"><li>props深入</li></ol><ol><li>children</li></ol><ul><li>children属性：表示组件标签的子节点。当组件标签有子节点时，props就会有该属性</li><li>children为jsx、组件、函数</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件标签的子节点：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;App&gt;我是子节点&lt;/App&gt;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>prop校验</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装prop-types npm i prop-types</span></span><br><span class="line"><span class="comment">//导入prop-types包</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"><span class="comment">//使用组件名propTypes=&#123;&#125;来给组件的props添加校验规则</span></span><br><span class="line">App.propTypes = &#123;</span><br><span class="line">    <span class="attr">colors</span>: PropTypes.array</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//约束规则 </span></span><br><span class="line"><span class="comment">//类型： array、bool、func、number、object、string</span></span><br><span class="line"><span class="comment">//React元素类型： element</span></span><br><span class="line"><span class="comment">//必填项：isRequired</span></span><br><span class="line"><span class="comment">//特定结构的对象： shape(&#123;&#125;)</span></span><br><span class="line"><span class="attr">optionalFunc</span>: PropTypes.func</span><br><span class="line"><span class="attr">requiredFunc</span>: PropTypes.func.isRequired</span><br><span class="line"><span class="attr">optionalObjectWithShape</span>: PropTypes.shape(&#123;</span><br><span class="line">    <span class="attr">color</span>: PropTypes.string</span><br><span class="line">    <span class="attr">fontsize</span>: PropTypes.number</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认值</span></span><br><span class="line">App.defaultProps = &#123;</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>二、组件生命周期</p><ol><li>生命周期的三个阶段：创建时、更新时、卸载时<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rO3rqTse-1634779131349)(/images/16775500-102dbe772034e8fa.webp)]</li></ol><p>1)创建时：constructor() -&gt; render() -&gt; componentDidMount()<br>|  钩子函数   | 触发时机  | 作用 |<br>|  —-  | —-  | — |<br>| constructor  | 创建组件时，最先执行 | 初始化state、为事件处理程序绑定this |<br>| render  | 每次组件渲染都会触发 | 渲染ui,不能调用setState() |<br>| componentDidMount | 组件挂载（完成Dom渲染后） | 发送网络请求、Dom操作</p><p>2)更新时：render() -&gt; componentDidUpdate()</p><ul><li><p>New Props 新的传值、setState()修改值 、forceUpdate()强制刷新时</p><div class="table-container"><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染ui,不能调用setState()</td></tr><tr><td>componentDidUpdate</td><td>组件挂载（完成Dom渲染后）</td><td>发送网络请求、Dom操作</td></tr></tbody></table></div></li><li><p>注意： 如果要setState()必须放在一个if条件中</p></li><li><p>否则会出现递归更新、无限调用</p></li><li><p>if判断是否更新啦值</p></li></ul><ol start="3"><li>卸载时： componentWillUnmount</li></ol><div class="table-container"><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>componentDidUpdate</td><td>组件卸载（从页面中消失）</td><td>执行清理工作（比如：清理定时器）</td></tr></tbody></table></div><p>三、render-props和高阶组件</p><ol><li>react组件复用 复用：state和 操作state的方法</li><li>两种方式： render props模式 和 高阶组件（HOC）</li></ol><ul><li>render props模式</li><li>思路：将要复用的state和操作state的方法封装到一个组件中</li><li>在使用组件时，添加一个值为函数的prop,通过函数参数来获取（需要组件内部实现）</li><li>使用该函数的返回值作为要渲染的ui内容（需要组件内部实现）</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mounse render=&#123;<span class="function">(<span class="params">mouse</span>) =&gt;</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;mouse.x&#125;&#123;mouse.y&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">)&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//鼠标位置state</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//鼠标移动事件的事件处理程序</span></span><br><span class="line">    handleMouseMove = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">x</span>: e.clientX,</span><br><span class="line">            <span class="attr">y</span>: e.clientY</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把this.state暴露到外部</span></span><br><span class="line">    <span class="comment">// children代替render属性</span></span><br><span class="line">    <span class="comment">// 注意： 并不是该模式叫render props就必须使用名render的prop,实际上可以使用任意名称的prop</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//return this.props.render(this.state)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.props.children(<span class="built_in">this</span>.state)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听鼠标移动事件</span></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>,<span class="built_in">this</span>.handleMouseMove)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//卸载时去掉事件</span></span><br><span class="line">    <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;mousemove&#x27;</span>,<span class="built_in">this</span>.handleMouseMove)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//render props模式添加props校验</span></span><br><span class="line">Mouse.propTypes = &#123;</span><br><span class="line">    <span class="attr">children</span>: PropTypes.func.isRequired</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将要复用的状态作为props.render(state)方法的参数,暴露到组件外部</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>render prop<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Mouse</span> <span class="attr">render</span>=<span class="string">&#123;(mouse)</span> =&gt;</span> (</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;mouse.x&#125;&#123;mouse.y&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                )&#125;/&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>高阶组件</li><li>思路： 高阶组件是一个函数，接收要包装的组件，返回增强后的组件</li><li>告诫组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑代码，通过prop将复用的状态传递为被包装组件WrappedComponent</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EnhanceComponet = withHOC(WrappedComponet)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state</span>&#125;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>使用步骤</li><li>1.创建一个函数，名称约定以with开头</li><li>2.指定函数参数，参数应该以大写字母开头（作为要渲染的组件）</li><li>3.在函数内部创建一个类组件，提供复用的状态逻辑代码，并返回</li><li>4.在该组件中，渲染参数组件，同时将状态通过prop传递给参数</li><li>5.调用该高阶组件，传入要增强的组件，通过返回值拿到增强后的组件，将其渲染到页面中</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建高阶组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withMouse</span>(<span class="params">WrappedComponent</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 该组件提供复用的状态逻辑</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">//鼠标状态</span></span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改值</span></span><br><span class="line">        handleMouseMove = <span class="function"><span class="params">e</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                <span class="attr">x</span>: e.clientX,</span><br><span class="line">                <span class="attr">y</span>: e.clientY</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//控制鼠标状态的逻辑</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>,<span class="built_in">this</span>.handleMouseMove)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//卸载时去掉事件</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;mousemove&#x27;</span>,<span class="built_in">this</span>.handleMouseMove)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">//this.props丢失设置</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state</span>&#125;&#123;<span class="attr">...this.props</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">WrappedComponent</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用displayname方法</span></span><br><span class="line">    Mouse.dispalyName = <span class="string">`WithMouse<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>`</span></span><br><span class="line">    <span class="keyword">return</span> Mouse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">const</span> Position = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        鼠标当前位置： &#123;props.x&#125;,&#123;props.y&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取增强后的组件</span></span><br><span class="line"><span class="keyword">const</span> MousePosition = withMouse(Position)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置获取name方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDisplayName</span>(<span class="params">WrappedComponent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> WrappedCompoent.displayName || WrappedComponent.name || <span class="string">&#x27;Component&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>高阶组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/*渲染增强后的组件*/&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">MousePosition</span>  <span class="attr">a</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="高阶组件"   >          <a href="#高阶组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h6>      <ol><li>函数当参数、或者当返回值</li><li>在原有组件上加上一些属性返回，包装一层</li><li>属性代理、反向代理</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一、组件通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父组件传递数据给儿组件 props接收传递给组件的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传递数据： 给组件标签添加属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接收数据： 函数组件通过参数props接收数据，类组件通过this.props接收数据&lt;/p&gt;</summary>
    
    
    
    
    <category term="react" scheme="https://lovepink527.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react基本使用</title>
    <link href="https://lovepink527.github.io/2022/01/16/react%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://lovepink527.github.io/2022/01/16/react%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-01-16T02:01:17.000Z</published>
    <updated>2022-01-16T02:02:17.199Z</updated>
    
    <content type="html"><![CDATA[<p>一、 react 使用</p><ol><li><p>npm i react react-dom</p></li><li><p>引入 react 和 react-dom 的 js</p><span id="more"></span> <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></div></figure></li><li><p>创建 React 元素</p></li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = React.createElement(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Hello React&quot;</span>);</span><br></pre></td></tr></table></div></figure><ol start="4"><li>渲染 React 元素到页面元素中</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></div></figure><p>二、项目</p><p>1.初始化</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">npm init react-app my-app</span><br></pre></td></tr></table></div></figure><p>2.使用</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = React.createElement(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Hello React&quot;</span>);</span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></div></figure><p>三、JSX</p><ul><li><p>createEelement 不够直观，所以用 jsx</p></li><li><p>在 js 中写 html 格式的代码</p></li><li><p>jsx 是 ECMAScript 的语法扩展,需要用 babel 编译，脚手架中有该配置，@babel/preset-react</p></li><li><p>class 属性名使用驼峰命名法,小括号包裹 JSX</p></li><li><p>特殊属性名： class-&gt; className \ for -&gt; htmlFor \tabindex -&gt; tabIndex</p></li></ul><ol><li>表达式</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        hello,jsx,&#123;name&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></div></figure><ol><li>条件渲染</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isLoading) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成，此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        hello,jsx,&#123;loadData&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></div></figure><ol start="2"><li>列表渲染</li></ol><ul><li>map()</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>,<span class="attr">name</span>: <span class="string">&#x27;hahaha&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>,<span class="attr">name</span>: <span class="string">&#x27;xixixi&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>,<span class="attr">name</span>: <span class="string">&#x27;houhouhou&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;songs.map(item =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></div></figure><ol start="3"><li>样式处理</li></ol><ol><li>行内样式 2) className</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 className=<span class="string">&quot;title&quot;</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">hahahah</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></div></figure><p>三、组件</p><ul><li>组件是react核心：可复用、独立、可组合</li></ul><ol><li>创建</li></ol><ol><li>函数组件： 大写字符开头、必须有返回值、可用箭头函数<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>组件组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></div></figure></li><li>类创建组件: 大写字母开头、必须继承React.Component父类、必须有render()、必须有返回值</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span>,root)</span><br></pre></td></tr></table></div></figure><ol start="2"><li>抽离</li></ol><ul><li>每个组件放到单独的js文件中</li></ul><ol><li>创建hello.js</li><li>在hello.js导入React</li><li>创建组件（函数或类）</li><li>导出</li><li>导入<br>6） 渲染<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hello.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br><span class="line"></span><br><span class="line"><span class="comment">//index</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;./Hello&#x27;</span></span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span>,root)</span><br></pre></td></tr></table></div></figure></li></ol><ol start="3"><li>事件绑定</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// on+ 事件名称=&#123;事件处理程序&#125;  驼峰命名法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;点击啦&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件对象 -&gt; 合成事件</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><ol start="4"><li>有状态组件和无状态组件</li></ol><ul><li><p>函数组件又叫无状态组件，类组件又叫做有状态组件</p></li><li><p>状态{state} 即为数据</p></li><li><p>函数组件没有自己的状态，只负责数据展示（静），类组件相反</p></li></ul><ol start="5"><li>state和setState</li></ol><ul><li>state的值是对象，表示一个组件可以有多个数据</li><li>this.setSate({要修改的值}) : 数据驱动视图</li><li>从jsx中抽离事件、改变this</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>()</span><br><span class="line">        <span class="comment">//初始化state</span></span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2改变this指向 Function.prototype.bind()</span></span><br><span class="line">        <span class="built_in">this</span>.onIncrement = <span class="built_in">this</span>.onIncrement.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3改变this指向 class的实例方法</span></span><br><span class="line">    onIncrement =<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//没办法直接用this.setState,</span></span><br><span class="line">        <span class="comment">//改变this指向</span></span><br><span class="line">        <span class="comment">//箭头函数、Function.prototype.bind()、class的实例方法-babel</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>有状态组件，&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                    this.setState(&#123;count: this.state.count + 1&#125;)</span></span><br><span class="line"><span class="xml">                &#125;&#125;&gt;第一种<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.onIncrement&#125;&gt;第11种<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1改变this指向 箭头函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="6"><li><p>表单处理</p></li><li><p>受控组件</p></li></ol><ul><li>由state的值来控制表单元素的值</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> value = &#123;<span class="built_in">this</span>.state.txt&#125;</span><br><span class="line">onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">this</span>.setState(&#123;<span class="attr">txt</span>: e.target.value&#125;)&#125;&gt;</span><br></pre></td></tr></table></div></figure><ul><li>每个受控表单都有一个事件太过繁琐，使用统一事件处理程序</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 给表单元素添加name属性，与state相同</span></span><br><span class="line"><span class="comment">// 2. 根据表单元素类型获取对应值</span></span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;txt&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; onChange=&#123;<span class="built_in">this</span>.handleChange&#125;/&gt;</span><br><span class="line"></span><br><span class="line">handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前dom对象</span></span><br><span class="line">    <span class="keyword">const</span> target = e.target</span><br><span class="line">    <span class="comment">//根据类型获取值</span></span><br><span class="line">    <span class="keyword">const</span> value = target.type === <span class="string">&#x27;txt&#x27;</span> ? target.value: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">//获取name</span></span><br><span class="line">    <span class="keyword">const</span> name = target.name</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        [name]: value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>非受控组件</li></ol><ul><li>调用React.createRef()方法创建一个ref对象</li><li>将创建的ref对象添加到文本框中</li><li>通过ref对象获取到文本框的值<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.txtRef = React.createRef()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.txtRef&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.txtRef.current.value)</span><br></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一、 react 使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;npm i react react-dom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引入 react 和 react-dom 的 js&lt;/p&gt;</summary>
    
    
    
    
    <category term="react" scheme="https://lovepink527.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基本使用</title>
    <link href="https://lovepink527.github.io/2022/01/16/TypeScript%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://lovepink527.github.io/2022/01/16/TypeScript%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-01-16T01:58:07.000Z</published>
    <updated>2022-01-16T01:59:27.455Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="一-初识TypeScript"   >          <a href="#一-初识TypeScript" class="heading-link"><i class="fas fa-link"></i></a><a href="#一-初识TypeScript" class="headerlink" title="一.初识TypeScript"></a>一.初识TypeScript</h3>              <h4 id="1-初识TypeScript"   >          <a href="#1-初识TypeScript" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-初识TypeScript" class="headerlink" title="1. 初识TypeScript"></a>1. 初识TypeScript</h4>      <ul><li>TypeScript是JavaScript类型的超集合，它可以编译成纯JavaScript<span id="more"></span>         <h4 id="2-安装TypeScript"   >          <a href="#2-安装TypeScript" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-安装TypeScript" class="headerlink" title="2. 安装TypeScript"></a>2. 安装TypeScript</h4>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局安装</span></span><br><span class="line">npm install -g typescript</span><br><span class="line"><span class="comment">// 查看版本</span></span><br><span class="line">tsc -v</span><br></pre></td></tr></table></div></figure>        <h4 id="3-TypeScript写程序"   >          <a href="#3-TypeScript写程序" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-TypeScript写程序" class="headerlink" title="3. TypeScript写程序"></a>3. TypeScript写程序</h4>              <h5 id="3-1hello-world程序"   >          <a href="#3-1hello-world程序" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1hello-world程序" class="headerlink" title="3.1hello world程序"></a>3.1hello world程序</h5>      </li><li>html中引入ts的文件，浏览器会报错，如果ts文件里面没有ts代码只有js代码，不会报错<figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;您好呀&#x27;</span> + str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;小甜甜&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(sayHi(text))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure></li><li>ts需要转义为js代码</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc 文件路径</span><br></pre></td></tr></table></div></figure><ul><li>html引入ts转义后的js代码</li></ul>        <h5 id="3-2-vscode自动编译"   >          <a href="#3-2-vscode自动编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-vscode自动编译" class="headerlink" title="3.2 vscode自动编译"></a>3.2 vscode自动编译</h5>      <ol><li>生成配置文件tsconfig.js</li></ol><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></div></figure><ol start="3"><li>修改tsconfig.json配置</li></ol><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;outDir&quot;</span>:<span class="string">&#x27;./js&#x27;</span>,</span><br><span class="line"><span class="string">&quot;strict&quot;</span>:<span class="literal">false</span> <span class="comment">// 不用严格模式</span></span><br></pre></td></tr></table></div></figure><ol start="5"><li>启动监视任务</li></ol><ul><li>终端-&gt; 运行任务 -&gt; 监视tsconfig.json</li></ul>        <h5 id="3-3-类型注解"   >          <a href="#3-3-类型注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-类型注解" class="headerlink" title="3.3 类型注解"></a>3.3 类型注解</h5>      <ul><li>是一种轻量级的为函数或者变量添加约束</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// str是string类型</span></span><br><span class="line"><span class="comment">// 如果是其他类型的会报错，智能的错误提示信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;床前明月光&#x27;</span> + str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">&#x27;疑似地上霜&#x27;</span></span><br><span class="line">showMsg(msg)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure>        <h5 id="3-4-接口"   >          <a href="#3-4-接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-接口" class="headerlink" title="3.4 接口"></a>3.4 接口</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口：是一种能力，一种约束而已</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">lastName</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出姓名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showFullName</span>(<span class="params">person: IPerson</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;东方&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>: <span class="string">&#x27;不败&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(showFullName(person))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure>        <h5 id="3-5-类"   >          <a href="#3-5-类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5-类" class="headerlink" title="3.5 类"></a>3.5 类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts中书写js中的类，演示效果</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="built_in">string</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义公共的字段（属性）</span></span><br><span class="line"><span class="attr">firstName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">lastName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">fullName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>,lastName:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//更新属性数</span></span><br><span class="line"><span class="built_in">this</span>.firstName = firstName</span><br><span class="line"><span class="built_in">this</span>.lastName = lastName</span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line"><span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showFullName</span>(<span class="params">Person:IPerson</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;诸葛&#x27;</span>,<span class="string">&#x27;孔明&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(showFullName(person))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure>        <h4 id="3-使用webpack打包TS"   >          <a href="#3-使用webpack打包TS" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-使用webpack打包TS" class="headerlink" title="3. 使用webpack打包TS"></a>3. 使用webpack打包TS</h4>      <ul><li>下载依赖<figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i -D typescript</span><br><span class="line">npm i -D webpack webpack-cli webpack-dev-server</span><br><span class="line">npm i -D html-webpack-plugin clean-webpack-plugin</span><br><span class="line">npm i -D ts-loader</span><br><span class="line">npm i -D cros-env</span><br></pre></td></tr></table></div></figure></li><li>入口JS:src/main.ts</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;hello webpack TS!&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>index页面：public/index.html</li><li>build/webpack.config.js        <h3 id="二-TypeScript常用类型"   >          <a href="#二-TypeScript常用类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#二-TypeScript常用类型" class="headerlink" title="二.TypeScript常用类型"></a>二.TypeScript常用类型</h3>              <h4 id="1-基础数据类型"   >          <a href="#1-基础数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-基础数据类型" class="headerlink" title="1.基础数据类型"></a>1.基础数据类型</h4>      </li><li>typescript支持与JavaScript几乎相同的数据类型        <h5 id="1-1-布尔型"   >          <a href="#1-1-布尔型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-布尔型" class="headerlink" title="1.1 布尔型"></a>1.1 布尔型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> isDone:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(isDone)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-2-数字类型"   >          <a href="#1-2-数字类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-数字类型" class="headerlink" title="1.2 数字类型"></a>1.2 数字类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> a1:<span class="built_in">number</span> = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-3-字符串类型"   >          <a href="#1-3-字符串类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-字符串类型" class="headerlink" title="1.3 字符串类型"></a>1.3 字符串类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> string1:<span class="built_in">string</span> = <span class="string">&#x27;hahahah&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(string1)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure></li></ul><p><strong>总结</strong></p><ul><li> 字符串和数值型能够拼接</li><li>ts中的变量一开始是什么类型，那么后期赋值也要什么类型，负责会报错        <h5 id="1-4-undefined和null"   >          <a href="#1-4-undefined和null" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-undefined和null" class="headerlink" title="1.4 undefined和null"></a>1.4 undefined和null</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> und:<span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> nul:<span class="literal">null</span>  = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> und = <span class="string">&#x27;hahah&#x27;</span></span><br><span class="line"><span class="keyword">let</span> nul = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(nul,und)</span><br><span class="line"><span class="comment">// undefined和null可以赋值其他数据类型</span></span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-4-数组和元组"   >          <a href="#1-4-数组和元组" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-数组和元组" class="headerlink" title="1.4 数组和元组"></a>1.4 数组和元组</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="comment">// 数组定义方式1</span></span><br><span class="line"><span class="keyword">let</span> arr1:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 数组定义方式2</span></span><br><span class="line"><span class="keyword">let</span> arr2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 数组定义后，里面的数据的类型必须和定义数组的时候的类型一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组类型:在定义数组的hi受，类型和数组的个数就已经限定</span></span><br><span class="line"><span class="keyword">let</span> arr3:[<span class="built_in">string</span>,<span class="built_in">number</span>,<span class="built_in">boolean</span>]= [<span class="string">&#x27;12&#x27;</span>,<span class="number">12</span>,<span class="literal">true</span>]</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-5-枚举"   >          <a href="#1-5-枚举" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-5-枚举" class="headerlink" title="1.5 枚举"></a>1.5 枚举</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="comment">// 枚举类型里面的每一个数据值都是元素，每个元素都有自己的编号，从0开始</span></span><br><span class="line"><span class="built_in">enum</span> Color&#123;red =<span class="number">1</span>,green =<span class="number">2</span>,blue =<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">let</span> color:Color = Color.red</span><br><span class="line"><span class="built_in">console</span>.log(color)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-6-any和void"   >          <a href="#1-6-any和void" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-6-any和void" class="headerlink" title="1.6 any和void"></a>1.6 any和void</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="comment">// any可以存储任意类型</span></span><br><span class="line"><span class="keyword">let</span> a:<span class="built_in">any</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="comment">// 个数不确定，类型不确定</span></span><br><span class="line"><span class="keyword">let</span> b:<span class="built_in">any</span>[] = [<span class="number">12</span>,<span class="string">&#x27;23&#x27;</span>]</span><br><span class="line">)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// void 类型:在函数声明的时候，小括号的后面使用：void,代表的是该函数没有任何的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">consle.log(<span class="string">&#x27;hhhhhh&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"><span class="comment">// 定义void类型的变量，可以接收一个undefined的值，但是意义不是很大</span></span><br><span class="line"><span class="keyword">let</span> vd:<span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="1-7-object类型"   >          <a href="#1-7-object类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-7-object类型" class="headerlink" title="1.7 object类型"></a>1.7 object类型</h5>      </li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，参数是object类型，返回值也是object类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params">obj:<span class="built_in">object</span></span>):<span class="title">object</span> </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;kakakak&#x27;</span></span><br><span class="line"><span class="attr">age</span>:  <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getObj(&#123;<span class="attr">name</span>:<span class="string">&#x27;xxxxx&#x27;</span>&#125;))</span><br></pre></td></tr></table></div></figure>        <h5 id="1-8-联合类型、类型断言、类型推断"   >          <a href="#1-8-联合类型、类型断言、类型推断" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-8-联合类型、类型断言、类型推断" class="headerlink" title="1.8 联合类型、类型断言、类型推断"></a>1.8 联合类型、类型断言、类型推断</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 联合类型：表示取值为多个类型中的一个</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">str:<span class="built_in">number</span>|<span class="built_in">string</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型断言:告诉编译器，我知道自己是什么类型，也知道自己在干什么</span></span><br><span class="line"><span class="keyword">let</span> a:<span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">(&lt;<span class="built_in">string</span>&gt;a).length</span><br><span class="line">(a <span class="keyword">as</span> <span class="built_in">string</span>).length</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推断</span></span><br><span class="line"><span class="keyword">let</span> b</span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">b = <span class="string">&#x27;100&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-接口"   >          <a href="#2-接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h4>              <h5 id="2-1接口"   >          <a href="#2-1接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1接口" class="headerlink" title="2.1接口"></a>2.1接口</h5>      <ul><li>结构进行类型检查，使用接口来定义对象的类型</li><li>接口是对象的状态（属性）和行为（方法）的抽象（描述）</li><li>接口：是一种类型、是一种规范、是一种规则、是一个能力、是一个约束</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：创建人的对象，需要对人的属性进行一定的约束</span></span><br><span class="line"><span class="comment">// id是number类型，必须有，只读</span></span><br><span class="line"><span class="comment">// name是string类型，必须要</span></span><br><span class="line"><span class="comment">// age是number类型，必须有</span></span><br><span class="line"><span class="comment">// sex是string类型，可以没有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口，该接口作为person对象的类型使用，限定或者是约束该对象中的属性数据</span></span><br><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line"><span class="comment">// id只读</span></span><br><span class="line"><span class="keyword">readonly</span> id:<span class="built_in">number</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// ? 可有可无</span></span><br><span class="line">sex ?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个人</span></span><br><span class="line"><span class="keyword">const</span> person:IPerson = &#123;</span><br><span class="line"><span class="attr">id</span>:<span class="number">7</span></span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;姜慧慧&#x27;</span></span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readonly vs const</span></span><br><span class="line"><span class="comment">// 看是作为变量还是常量</span></span><br></pre></td></tr></table></div></figure>        <h5 id="2-2函数类型"   >          <a href="#2-2函数类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2函数类型" class="headerlink" title="2.2函数类型"></a>2.2函数类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为啦使用接口表示函数类型，我们需要给接口一个调用签名</span></span><br><span class="line"><span class="comment">// 它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型：通过接口的方式作为函数的类型来使用</span></span><br><span class="line"><span class="keyword">interface</span> ISearchFunc&#123;</span><br><span class="line"><span class="comment">//定义一个调用签名</span></span><br><span class="line">(source:<span class="built_in">string</span>,<span class="attr">substring</span>:<span class="built_in">string</span>):<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个函数，该类型就是上面定义的接口</span></span><br><span class="line"><span class="keyword">const</span> searchString:ISearchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">source:<span class="built_in">string</span>,substring:<span class="built_in">string</span></span>):<span class="title">boolean</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> source.search(substring) &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="built_in">console</span>.log(searchString(<span class="string">&#x27;abcdef&#x27;</span>,<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></div></figure>        <h5 id="2-3类类型"   >          <a href="#2-3类类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3类类型" class="headerlink" title="2.3类类型"></a>2.3类类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类 类型：类的类型，类的类型可以通过接口来实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> IFly&#123;</span><br><span class="line"><span class="comment">// 该方法没有任何的实现（方法中什么都没有）</span></span><br><span class="line">fly()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，这个类的类型就是上面定义的接口（实际上也可以理解为，IFly接口约束了当前的这个Person类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">IFly</span> </span>&#123;</span><br><span class="line"><span class="comment">// 实现接口中的方法</span></span><br><span class="line"><span class="function"><span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我会飞了，我是超人&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fly()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> ISwim &#123;</span><br><span class="line">swim()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，这个类的类型就是IFly和Swim(当前这个类可以实现多个接口，一个类同时也可以被多个接口进行约束)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> <span class="title">implements</span> <span class="title">IFly</span>,<span class="title">ISwim</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我会飞了，我是超人&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">swim</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我会游泳&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person2</span><br><span class="line">person.fly()</span><br><span class="line">person.swim()</span><br><span class="line"><span class="comment">// 总结：类可以通过接口的方式，来定义当前这个类的类型</span></span><br><span class="line"><span class="comment">// 类可以实现一个接口，类也可以实现多个接口，要注意，接口中的内容都要真正的实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口可以继承其他的多个接口</span></span><br><span class="line"><span class="comment">// 定义一个接口，继承其他的多个接口</span></span><br><span class="line"><span class="keyword">interface</span> IMyFlyAndSwim <span class="keyword">extends</span> IFly,Swim &#123;&#125;</span><br><span class="line"><span class="comment">// 定义一个类，直接实现IMyFlyAndSwim这个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span> <span class="title">implements</span> <span class="title">IMyFlyAndSwim</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;飞&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">swim</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;游&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person3 = <span class="keyword">new</span> Person3()</span><br><span class="line">person3.fly()</span><br><span class="line">person3.swim()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结：接口与接口之间叫做继承implement ，接口与类之间是实现用extends</span></span><br></pre></td></tr></table></div></figure>        <h4 id="3-类"   >          <a href="#3-类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-类" class="headerlink" title="3.类"></a>3.类</h4>              <h5 id="3-1类"   >          <a href="#3-1类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1类" class="headerlink" title="3.1类"></a>3.1类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类：可以理解为模板，通过模板实例化对象</span></span><br><span class="line"><span class="comment">//面向对象的编程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 定义构造函数：为啦将来实例化对象的时候，可以直接对属性的值进行初始化</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//更新对象中的属性数据</span></span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(大家好,str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;jenkins&#x27;</span>,<span class="number">15</span>)</span><br><span class="line">person.sayHi(<span class="string">&#x27;xixixi&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h5 id="3-2继承"   >          <a href="#3-2继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2继承" class="headerlink" title="3.2继承"></a>3.2继承</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承：类与类之间的关系</span></span><br><span class="line"><span class="comment">// 继承后类与类的叫法：</span></span><br><span class="line"><span class="comment">// A类继承了B类，那么A类叫子类，B类叫做基类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义实例方法</span></span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>,str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，继承Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strudent</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//调用的是父类中的构造函数，使用的是super</span></span><br><span class="line"><span class="built_in">super</span>(name,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以调用父类中的方法</span></span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我是学生类中的sayHi方法&#x27;</span>)</span><br><span class="line"><span class="comment">//调用父类中的sayHi方法</span></span><br><span class="line"><span class="built_in">super</span>.sayHi(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化Person</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;小明&#x27;</span>,<span class="number">14</span>)</span><br><span class="line">person.sayHi(<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> Student(<span class="string">&#x27;小工&#x27;</span>，<span class="number">23</span>)</span><br><span class="line">person2.sayHi()</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结：类与类之间如果要有继承关系需要使用extends</span></span><br><span class="line"><span class="comment">// 子类可以嗲用父类中的构造函数，使用的是super关键字（包括调用父类中的实例方法，也可以使用super）</span></span><br><span class="line"><span class="comment">// 子类可以重写父类中的方法</span></span><br></pre></td></tr></table></div></figure>        <h5 id="3-3多态"   >          <a href="#3-3多态" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3多态" class="headerlink" title="3.3多态"></a>3.3多态</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多态：父类型的引用指向了子类型的对象，不同类型的对象针对相同的方法，产生了不同的行为</span></span><br><span class="line"><span class="comment">// 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">run()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params">distance:<span class="built_in">number</span>=<span class="number">5</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;跑啦&#x27;</span> + distance + <span class="string">&#x27;米&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params">distance:<span class="built_in">number</span>=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;跑啦&#x27;</span> + distance + <span class="string">&#x27;米&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化父类对象</span></span><br><span class="line"><span class="keyword">const</span> ani:Animal = <span class="keyword">new</span> Animal(<span class="string">&#x27;动物&#x27;</span>)</span><br><span class="line">ani.run()</span><br><span class="line"><span class="comment">//实例化子类对象</span></span><br><span class="line"><span class="keyword">const</span> dog:Dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;狗&#x27;</span>)</span><br><span class="line">dog.run()</span><br><span class="line"><span class="comment">//实例化子类对象</span></span><br><span class="line"><span class="keyword">const</span> cat:Cat = <span class="keyword">new</span> Cat(<span class="string">&#x27;猫&#x27;</span>)</span><br><span class="line">cat.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类和子类的关系：父子关系，父类类型创建子类的对象</span></span><br><span class="line"><span class="keyword">const</span> dog1:Animal = <span class="keyword">new</span> Dog(<span class="string">&#x27;小黄&#x27;</span>)</span><br><span class="line">dog1.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数需要的参数是animal类型，dog1和cat都可以</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showRun</span>(<span class="params">ani:Animal</span>)</span>&#123;</span><br><span class="line">ani.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="3-4修饰符"   >          <a href="#3-4修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4修饰符" class="headerlink" title="3.4修饰符"></a>3.4修饰符</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰符（类中的成员的修饰符）：主要是描述类中的成员（属性，构造函数，方法）的可访问性</span></span><br><span class="line"><span class="comment">// public修饰符，类中的成员默认是这个修饰符，任何位置都可以访问</span></span><br><span class="line"><span class="comment">// private修饰符，类中的成员使用这个修饰符外部无法访问这个成员数据，子类也无法访问这个成员变量</span></span><br><span class="line"><span class="comment">// protected修饰符，类中的成员使用这个修饰符外部无法访问这个成员数据，但是子类**可以访问**这个成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// readonly修饰符：首先是一个关键字，对类中的属性成员进行修饰时候，该成员变量不能再外部随意更改；</span></span><br><span class="line"><span class="comment">//类中contructor可以修改</span></span><br><span class="line"><span class="comment">//但是如果类中的contructor没有参数，那么constructor也不可以修改</span></span><br><span class="line"><span class="comment">//类中的方法不可以修改。</span></span><br><span class="line"><span class="comment">// 构造函数中的name参数，一旦使用readonly进行修饰后，那么Person中就有啦一个name属性成员</span></span><br><span class="line"><span class="comment">// 构造函数中的name参数，一旦使用public进行修饰后，那么Person中就有啦一个公共name属性成员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 定义构造函数：为啦将来实例化对象的时候，可以直接对属性的值进行初始化</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">readonly</span> name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//更新对象中的属性数据</span></span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(大家好,str,<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;jenkins&#x27;</span>,<span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></div></figure>        <h5 id="3-5存取器"   >          <a href="#3-5存取器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5存取器" class="headerlink" title="3.5存取器"></a>3.5存取器</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存取器：让我们可以有效地控制对 对象中的成员的访问，通过getters和setters进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部可以传姓氏和姓名数据，同时使用set和get控制姓名的数据，外部可可以进行修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">lastName</span>:<span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>,lastName:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.firstName = firstName</span><br><span class="line"><span class="built_in">this</span>.lastName = lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取器</span></span><br><span class="line"><span class="keyword">get</span> <span class="title">fullName</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.firstName +  <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置器</span></span><br><span class="line"><span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">val</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> names = val.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.firstName = <span class="built_in">this</span>.names[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">this</span>.lastName = <span class="built_in">this</span>.names[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person:Person = <span class="keyword">new</span> Person(<span class="string">&#x27;东方&#x27;</span>,<span class="string">&#x27;不败&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.fullNAME())</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="3-6静态成员"   >          <a href="#3-6静态成员" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-6静态成员" class="headerlink" title="3.6静态成员"></a>3.6静态成员</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态成员：在类中通过static修饰的属性或者方法，那么就是静态的属性和静态的方法</span></span><br><span class="line"><span class="comment">// 静态成员在使用的时候是通过类名，的这种语法来调用的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//类中默认有一个内置的name静态属性</span></span><br><span class="line"><span class="keyword">static</span> name1 :<span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 此时this是实例对象,name1是静态属性，不能通过实例对象直接调用到</span></span><br><span class="line"><span class="comment">//this.name1 = name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过类名，静态属性的方法可以访问该成员变量</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.name1)</span><br><span class="line"><span class="comment">// 通过类名，静态属性的方法来设置该成员数据</span></span><br><span class="line">Person.name1 = <span class="string">&#x27;佐助&#x27;</span></span><br><span class="line"><span class="comment">// 通过类名，静态方法的方式来调用内部的静态的 方法</span></span><br><span class="line">Person.sayHi</span><br></pre></td></tr></table></div></figure>        <h5 id="3-7抽象类"   >          <a href="#3-7抽象类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-7抽象类" class="headerlink" title="3.7抽象类"></a>3.7抽象类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类：包含抽象方法（抽象方法一般没有任何的具体内容的实现），也可以包含实例方法，抽象类是不能被实例化，为啦让子类进行实例化和实现内部的抽象方法</span></span><br><span class="line"><span class="comment">// 抽象类的目的和作用都是为子类服务的</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">//抽象属性</span></span><br><span class="line"><span class="comment">// abstract name:string</span></span><br><span class="line"><span class="comment">// 抽象方法不能有具体的实现</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//实例方法</span></span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能实例化抽象类的对象</span></span><br><span class="line"><span class="comment">// 定义一个子类（派生类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">//重新的实现抽象类中的方法，此时这个方法是当前Dog的实例方法</span></span><br><span class="line"><span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;真好吃&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化Dog的对象</span></span><br><span class="line"><span class="keyword">const</span> dog:Dog = <span class="keyword">new</span> Dog()</span><br><span class="line">dog.eat()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="4-函数"   >          <a href="#4-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h4>              <h5 id="4-1函数"   >          <a href="#4-1函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1函数" class="headerlink" title="4.1函数"></a>4.1函数</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：封装了一些重复使用的代码，在需要的时候直接调用即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函数，函数表达式</span></span><br><span class="line"><span class="keyword">const</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ts</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函数，函数表达式</span></span><br><span class="line"><span class="keyword">const</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数完成写法</span></span><br><span class="line"><span class="comment">// (x:number,y:number) =&gt; number是函数的类型</span></span><br><span class="line"><span class="keyword">const</span> add3:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span> (<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="4-2可选参数和默认参数、剩余参数"   >          <a href="#4-2可选参数和默认参数、剩余参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2可选参数和默认参数、剩余参数" class="headerlink" title="4.2可选参数和默认参数、剩余参数"></a>4.2可选参数和默认参数、剩余参数</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选参数和默认参数</span></span><br><span class="line"><span class="keyword">const</span> getFullName = <span class="function"><span class="keyword">function</span>(<span class="params">firstName:<span class="built_in">string</span> = <span class="string">&#x27;东方&#x27;</span>,lastName?:<span class="built_in">string</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> firstName + <span class="string">&#x27;-&#x27;</span> +  lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剩余参数(rest参数)</span></span><br><span class="line"><span class="comment">// ...args：string[]表示剩余参数在args,必须放在最后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">str:<span class="built_in">string</span>,...args:<span class="built_in">string</span>[]</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">showMsg(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="4-3函数重载"   >          <a href="#4-3函数重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-3函数重载" class="headerlink" title="4.3函数重载"></a>4.3函数重载</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数重载：函数名字不同，函数的参数和个数不同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">string</span>,x:<span class="built_in">string</span></span>):<span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span></span></span><br><span class="line"><span class="function"><span class="function"></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">string</span>|<span class="built_in">number</span>,y:<span class="built_in">string</span>|<span class="built_in">number</span></span>):<span class="title">string</span>|<span class="title">number</span> </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;string&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">x</span> + <span class="title">y</span></span></span><br><span class="line"><span class="function">&#125;<span class="title">else</span> <span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;number&#x27;</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不符合规范的会报错</span></span><br></pre></td></tr></table></div></figure>        <h4 id="5-泛型"   >          <a href="#5-泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-泛型" class="headerlink" title="5.泛型"></a>5.泛型</h4>              <h5 id="5-1泛型"   >          <a href="#5-1泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-1泛型" class="headerlink" title="5.1泛型"></a>5.1泛型</h5>      <ul><li>泛型：在定义函数、接口、类的时候不能预先确定要使用的数据的类型，而是在使用函数、接口、类的时候才能确定数据的类型</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 定义一个函数</span><br><span class="line">- <span class="comment">//需求：可以传入任意类型的数组，返回来的是存储这个任意类型数据的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T,count:<span class="built_in">number</span></span>):<span class="title">T</span>[] </span>&#123;</span><br><span class="line"><span class="comment">//根据数据和数量产生一个数组</span></span><br><span class="line"><span class="keyword">const</span> arr:<span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt;count;i ++)&#123;</span><br><span class="line">arr.push(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = getArr&lt;<span class="built_in">number</span>&gt;(<span class="number">200</span>,<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="5-2多个泛型参数"   >          <a href="#5-2多个泛型参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-2多个泛型参数" class="headerlink" title="5.2多个泛型参数"></a>5.2多个泛型参数</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;(<span class="params">value1:K,value2:V</span>):[<span class="title">K</span>,<span class="title">V</span>]</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [value1,value2]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = getMsg&lt;<span class="built_in">string</span>,<span class="built_in">number</span>&gt;(<span class="string">&#x27;jack&#x27;</span>,<span class="number">123</span>)</span><br></pre></td></tr></table></div></figure>        <h5 id="5-3泛型接口"   >          <a href="#5-3泛型接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-3泛型接口" class="headerlink" title="5.3泛型接口"></a>5.3泛型接口</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口：在定义接口时，为接口中的属性或方法定义泛型类型，在使用接口时，再指定具体的泛型类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求：定义一个类，用来存储用户的相关信息（id,姓名，年龄）</span></span><br><span class="line"><span class="comment">// 通过一个类的实例对象调用相关的方法可以添加多个用户信息对象，调用getUserId方法可以根据id获取某个用户信息对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> IBaseCRUD&lt;T&gt;&#123;</span><br><span class="line"><span class="attr">data</span>: <span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line">add:<span class="function">(<span class="params">t:T</span>) =&gt;</span> T</span><br><span class="line"><span class="attr">getUserId</span>:<span class="function">(<span class="params">id:<span class="built_in">number</span></span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个用户信息的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">id?:<span class="built_in">number</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，可以针对用户的信息对象进行增加及查询的操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCRUD</span> <span class="title">implements</span> <span class="title">IBaseCRUD</span>&lt;<span class="title">user</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 用来保存多个User类型的用户信息对象</span></span><br><span class="line"><span class="attr">data</span>:<span class="built_in">Array</span>&lt;User&gt;&#123;</span><br><span class="line"><span class="comment">//方法用来存储用户信息对象的</span></span><br><span class="line">add(user:User):User &#123;</span><br><span class="line">user.id = <span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random()</span><br><span class="line"><span class="built_in">this</span>.data.push(user)</span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法保存id查询指定的用户信息对象</span></span><br><span class="line">getUserId(id:<span class="built_in">number</span>)=&gt; User&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.data.find(<span class="function"><span class="params">user</span> =&gt;</span> user.id === id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化添加用户信息对象的类UserCRUD</span></span><br><span class="line"><span class="keyword">const</span> userCRUD:UserCRUD = <span class="keyword">new</span> UserCRUD()</span><br><span class="line">userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;jack&#x27;</span>,<span class="number">20</span>))</span><br><span class="line"><span class="keyword">const</span> &#123;id&#125; = userCRUD.add(<span class="string">&#x27;tom&#x27;</span>,<span class="number">17</span>)</span><br><span class="line"><span class="keyword">const</span> user = userCRUD.getUserId(id)</span><br><span class="line"><span class="built_in">console</span>.log(user)</span><br></pre></td></tr></table></div></figure>        <h5 id="5-4泛型类"   >          <a href="#5-4泛型类" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-4泛型类" class="headerlink" title="5.4泛型类"></a>5.4泛型类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个类，类中的属性值的类型是不确定，方法中的参数及返回值的类型也不确定</span></span><br><span class="line"><span class="comment">// 定义一个泛型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericName</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 默认的属性的值的类型是泛型类型</span></span><br><span class="line"><span class="attr">defaultValue</span>: T</span><br><span class="line"><span class="attr">add</span>:<span class="function">(<span class="params">x:T,y:T</span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例化类的对象的时候，再确定泛型的类型</span></span><br><span class="line"><span class="keyword">const</span> g1:GenericNumber&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line"><span class="comment">// 设置属性值</span></span><br><span class="line">g1.defaultValue = <span class="number">100</span></span><br><span class="line"><span class="comment">// 相加的方法</span></span><br><span class="line">g1.add = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+ y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例化类的对象的时候，再确定泛型的类型</span></span><br><span class="line"><span class="keyword">const</span> g2:GenericNumber&lt;<span class="built_in">string</span>&gt; = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line"><span class="comment">// 设置属性值</span></span><br><span class="line">g1.defaultValue = <span class="string">&#x27;&#x27;</span>哈哈哈</span><br><span class="line"><span class="comment">// 相加的方法</span></span><br><span class="line">g1.add = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+ y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="5-5泛型约束"   >          <a href="#5-5泛型约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-5泛型约束" class="headerlink" title="5.5泛型约束"></a>5.5泛型约束</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果我们直接对一个泛型参数取length属性，会报错，因为这个泛型根本就不知道它有这个属性</span></span><br><span class="line"><span class="comment">// 定义一个接口，来约束</span></span><br><span class="line"><span class="keyword">interface</span> Ilength&#123;</span><br><span class="line"><span class="comment">// 接口中有一个属性length</span></span><br><span class="line"><span class="attr">length</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Ilength</span>&gt;(<span class="params">x:T</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getLength&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;what are you no sha lei&#x27;</span>))</span><br></pre></td></tr></table></div></figure>        <h4 id="6-其他"   >          <a href="#6-其他" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h4>              <h5 id="6-1声明文件"   >          <a href="#6-1声明文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-1声明文件" class="headerlink" title="6.1声明文件"></a>6.1声明文件</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> JQuery:(selector:<span class="built_in">string</span>)</span><br><span class="line"><span class="comment">//jquery里面如果有类型选择器必须为string,否则会报错</span></span><br><span class="line"><span class="comment">//可以按照对应的声明文件types/jquery</span></span><br></pre></td></tr></table></div></figure>        <h5 id="6-2内置对象"   >          <a href="#6-2内置对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-2内置对象" class="headerlink" title="6.2内置对象"></a>6.2内置对象</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.ECMAScript内置对象</span></span><br><span class="line"><span class="comment">// 2.BOM和DOM内置对象</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一-初识TypeScript&quot;   &gt;
          &lt;a href=&quot;#一-初识TypeScript&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#一-初识TypeScript&quot; class=&quot;headerlink&quot; title=&quot;一.初识TypeScript&quot;&gt;&lt;/a&gt;一.初识TypeScript&lt;/h3&gt;
      
        &lt;h4 id=&quot;1-初识TypeScript&quot;   &gt;
          &lt;a href=&quot;#1-初识TypeScript&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-初识TypeScript&quot; class=&quot;headerlink&quot; title=&quot;1. 初识TypeScript&quot;&gt;&lt;/a&gt;1. 初识TypeScript&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;TypeScript是JavaScript类型的超集合，它可以编译成纯JavaScript</summary>
    
    
    
    
    <category term="TypeScript" scheme="https://lovepink527.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>vue3初体验</title>
    <link href="https://lovepink527.github.io/2022/01/11/vue3%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://lovepink527.github.io/2022/01/11/vue3%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2022-01-11T10:40:23.000Z</published>
    <updated>2022-01-16T01:54:47.498Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="一、vite初始化项目"   >          <a href="#一、vite初始化项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、vite初始化项目" class="headerlink" title="一、vite初始化项目"></a>一、vite初始化项目</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建vite项目，选择vue -&gt; 选择vue-ts</span></span><br><span class="line"> npm init @vitejs/app myProject</span><br><span class="line"><span class="comment"># 进入项目</span></span><br><span class="line"> <span class="built_in">cd</span> myProject</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"> npm install</span><br><span class="line"><span class="comment"># 启动项目</span></span><br><span class="line"> npm run dev</span><br></pre></td></tr></table></div></figure><span id="more"></span>         <h3 id="二、Composition-API-常用部分"   >          <a href="#二、Composition-API-常用部分" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、Composition-API-常用部分" class="headerlink" title="二、Composition API(常用部分)"></a>二、Composition API(常用部分)</h3>              <h4 id="2-1setup和ref"   >          <a href="#2-1setup和ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1setup和ref" class="headerlink" title="2.1setup和ref"></a>2.1setup和ref</h4>      <ul><li>setup是组合api中第一个要使用的函数</li><li>setup是组合api的入口函数</li><li>ref对象是一个函数，作用是定义一个响应式数据,返回一个ref对象，对象中有一个value属性，如果需要对修改，可以修改value</li><li>ref可以获取页面中的元素const inputRef = ref&lt;HTMLElement | null&gt;(null)</li><li>html是不需要用count.value取数据的，直接count就可以<figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="comment">//const number = 10 // 此时还不是相应数据</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>) <span class="comment">// ref对象是一个函数，作用是定义一个响应式数据,返回一个ref对象，对象中有一个value属性，如果需要对修改，可以修改value</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">count.value ++ </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个对象</span></span><br><span class="line"><span class="comment">//把变量和方法都暴露出去</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">count,</span><br><span class="line">updateCount</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul><p><strong>setup执行的时机</strong></p><ul><li>setup是beforeCreate声明周期回调之前就执行了，而且执行一次</li><li>由此可以推断出，在setup执行的时候，当前的组件还没有创建，也就意味着：组件实例对象this根本就不能使用</li><li>this是undefined,说明，就不能通过this再去调用data/computed/methods/props中的相关内容了</li><li>其实所有的composition API相关回调函数中也都不可以</li></ul><p><strong>setup返回值</strong></p><ul><li>setup中的返回值是一个对象，内部的属性和方法是给html模板使用</li><li>setup中的对象内部的属性和data函数中的return对象的属性都可以在html模板中使用</li><li>setup中的对象中的属性和data函数中的对象中的属性会合并为组件对象的属性</li><li>setup中的对象中的方法和methods对象中的方法会合并为组件的方法</li><li>在vue3中尽量不要混合使用data\setup\method\setup</li><li>setup不能是一个async函数：因为返回值不再是return的对象，而是promise，模板看不到return对象中的属性数据</li></ul><p><strong>setup中的参数</strong></p><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line"><span class="comment">// props参数，是一个对象，里面有父级组件向子集组件传递的数据，并且在子集组件中使用prop接收到的所有的属性</span></span><br><span class="line"><span class="comment">// 包含props配置声明且传入了的所有属性的对象</span></span><br><span class="line"><span class="comment">// context参数，是一个对象，里面有attar对象（获取当前组件标签上的所有的属性的对象，但是该属性是在props中没有声明接收的所有的需要的对象），emit方法（分发事件），slots对象（插槽）</span></span><br><span class="line"><span class="comment">// 包含没有在props配置中声明的属性的对象，相当于this.$attrs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2-2reactive的使用"   >          <a href="#2-2reactive的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2reactive的使用" class="headerlink" title="2.2reactive的使用"></a>2.2reactive的使用</h4>      <ul><li>作用：定义一个响应式复杂数据</li><li>使用proxy实现，通过代理对象操作源对象内部数据都是响应式的</li><li>const proxy = reactive(obj): 接口一个普通对象然后返回该普通对象的响应式代理器对象。</li><li>响应式转换是‘深层的’：会影响对象内部所有嵌套的属性</li><li><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 把复杂数据变成响应式数据</span></span><br><span class="line"><span class="comment">// 返回的是一个Proxy的代理对象，被代理者的对象就是obj对象</span></span><br><span class="line"><span class="comment">// user现在式代理对象，obj式目标对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line"><span class="attr">wife</span>:&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = reactive(obj)</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="keyword">const</span> updateUser = <span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 直接使用目标对象的方式来更新目标对象中的成员值，式不可能的，只能使用代理对象更新目标对象</span></span><br><span class="line">user.name = <span class="string">&#x27;小小&#x27;</span></span><br><span class="line">obj.gender = <span class="string">&#x27;男&#x27;</span> <span class="comment">//界面不会更新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">user,</span><br><span class="line">updateUser</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// user对象或者obj对象添加一个新的属性，删除一个新的属性</span></span><br><span class="line"><span class="comment">//  === 添加</span></span><br><span class="line"><span class="comment">// 对obj操作界面没有变化，对user操作界面会变化,obj确实变化啦</span></span><br><span class="line"><span class="comment">// 对user操作，obj也会会更新值，界面变化</span></span><br></pre></td></tr></table></div></figure>细节：        <h4 id="2-3vue2和vue3的响应式"   >          <a href="#2-3vue2和vue3的响应式" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3vue2和vue3的响应式" class="headerlink" title="2.3vue2和vue3的响应式"></a>2.3vue2和vue3的响应式</h4>      </li></ul><p><strong>vue2的响应式</strong><br><strong>核心：</strong></p><ul><li>对象：通过defineProperty对对象的已有的读取和修改进行拦截（监听和拦截）</li><li>数据：通过重写数组更新数组一些列更新元素的方式来实现元素修改的劫持</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data,<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p><strong>问题：</strong></p><ul><li>对象直接新添加的属性或者删除已有属性，界面不会自动更新</li><li>直接通过下标替换元素或者更新length,界面不会自动更新arr[1] = {}</li><li>所有有了后来的$set()方法实现响应式</li></ul><hr><p> <strong>vue3的响应式</strong><br><strong>核心：</strong></p><ul><li>通过Proxy(代理)：拦截对data任意属性的操作，包括属性值的读写，属性的添加、属性的删除等</li><li>通过Reflect(反射)：动态对被代理对象的相应属性进行特定的操作</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span><br><span class="line"><span class="comment">//拦截获取属性值</span></span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target,prop</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,prop)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//拦截设置属性值</span></span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target,prop,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,prop,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-4ref和reactive"   >          <a href="#2-4ref和reactive" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4ref和reactive" class="headerlink" title="2.4ref和reactive"></a>2.4ref和reactive</h4>      <ul><li>重要的响应式API(ref和reactive)</li><li>ref用来处理基本类型数据，react用来处理对象（递归深度响应式）</li><li>如果ref对象/数组，内部会自动将对象/数组转换为reactive的代理对象</li><li>ref内部：通过给value属性添加getter/setter来实现对数据的劫持</li><li>reactive内部：通过proxy来实现对对象内部所有数据的劫持，并通过Reflect来更新源目标对象</li><li>ref的数据操作，在js中要.value,在模板中不需要（内部自动解析）        <h4 id="2-5计算属性和监视"   >          <a href="#2-5计算属性和监视" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5计算属性和监视" class="headerlink" title="2.5计算属性和监视"></a>2.5计算属性和监视</h4>      </li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;东方&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;不败&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fullName = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> user.firstName + <span class="string">&#x27;_&#x27;</span> + user.lastName</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> fulName3 = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">//监视指定数据</span></span><br><span class="line">watch(user,<span class="function">(<span class="params">firstName,lastName</span>)=&gt;</span>&#123;</span><br><span class="line">fullName3.value = firstName + <span class="string">&#x27;_&#x27;</span> + lastName</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">// immediate默认执行一次，deep深度监视</span></span><br><span class="line"><span class="comment">//监视，不需要配置immediate，本身默认就会进行监视，默认执行一次</span></span><br><span class="line">watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">fullName3.value = user.firstName + <span class="string">&#x27;_&#x27;</span> + user.lastName</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// watch可以监视多个数据,如果不是响应式数据需要回调的方式</span></span><br><span class="line">watch([<span class="function">()=&gt;</span>firstName,<span class="function">()=&gt;</span>lastName,<span class="function">()=&gt;</span>fullName3],<span class="function">()=&gt;</span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">user,</span><br><span class="line">fullName,</span><br><span class="line">fullName3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2-6声明周期对比"   >          <a href="#2-6声明周期对比" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6声明周期对比" class="headerlink" title="2.6声明周期对比"></a>2.6声明周期对比</h4>              <h5 id="2-6-1与2-0的声明周期对应的组合API"   >          <a href="#2-6-1与2-0的声明周期对应的组合API" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-1与2-0的声明周期对应的组合API" class="headerlink" title="2.6.1与2.0的声明周期对应的组合API"></a>2.6.1与2.0的声明周期对应的组合API</h5>      <ul><li>beforeCreate -&gt; setup()</li><li>created -&gt; setup()</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onupdated</li><li>beforeDestroy改名啦 -&gt; onBeforeUnmount</li><li>destroyed改名啦 -&gt; onUnmounted</li><li>errCaptured -&gt; onErrorCaptured        <h5 id="2-6-2-新增钩子函数"   >          <a href="#2-6-2-新增钩子函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-2-新增钩子函数" class="headerlink" title="2.6.2 新增钩子函数"></a>2.6.2 新增钩子函数</h5>      </li><li>onRenderTracked</li><li>onRenderTriggred</li><li>两个钩子函数都接收一个DebuggerEvent,与watchEffect参数选项中的onTrack和onTrigger类似</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-7hook函数自定义"   >          <a href="#2-7hook函数自定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7hook函数自定义" class="headerlink" title="2.7hook函数自定义"></a>2.7hook函数自定义</h4>      <ul><li>类似于axios封装        <h4 id="2-8toRefs"   >          <a href="#2-8toRefs" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-8toRefs" class="headerlink" title="2.8toRefs"></a>2.8toRefs</h4>      </li><li>把一个响应式对象转换成普通对象，该普通对象的每个property都有一个ref</li><li>应用： 当从合成函数返回响应式对象时，toRefs非常有用，这样消费组件就可以在不丢失响应式的情况下，返回对象进行分解使用</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;自来也&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">47</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> &#123;name,age&#125; = toRefs(state)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">name.name += <span class="string">&#x27;==&#x27;</span></span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...state, <span class="comment">// 不是响应式的数据</span></span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="三、Composition-API-其他部分"   >          <a href="#三、Composition-API-其他部分" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、Composition-API-其他部分" class="headerlink" title="三、Composition API(其他部分)"></a>三、Composition API(其他部分)</h3>              <h4 id="3-1-shallowReactive-与-shallowRef"   >          <a href="#3-1-shallowReactive-与-shallowRef" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-shallowReactive-与-shallowRef" class="headerlink" title="3.1 shallowReactive 与 shallowRef"></a>3.1 shallowReactive 与 shallowRef</h4>      <ul><li>shallowReactive 浅劫持：只处理了对象内最外层属性的响应式</li><li>shallowRef  浅劫持： 只处理了value的响应式，不进行对象的reactive处理</li><li>如果一个对象数据，结构比较深，但变化时只是外层属性变化 shallowReactive</li><li>如果一个对象数据，后面会产生新的对象来替换 shallowRef        <h4 id="3-1-readonly和shallowReadonly"   >          <a href="#3-1-readonly和shallowReadonly" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-readonly和shallowReadonly" class="headerlink" title="3.1 readonly和shallowReadonly"></a>3.1 readonly和shallowReadonly</h4>      </li><li>readonly 深度只读</li><li>shallowReadonly 浅只读的        <h4 id="3-2-toRaw和markRaw"   >          <a href="#3-2-toRaw和markRaw" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-toRaw和markRaw" class="headerlink" title="3.2 toRaw和markRaw"></a>3.2 toRaw和markRaw</h4>      </li><li>toRaw 把代理对象变成普通对象，数据变化，界面不变化</li><li>markRaw 标记的对象数据，从此以后再也不能成为代理对象啦        <h4 id="3-3-toRef和ref"   >          <a href="#3-3-toRef和ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-toRef和ref" class="headerlink" title="3.3 toRef和ref"></a>3.3 toRef和ref</h4>      </li><li>ref—-&gt;复制，修改响应式数据不会影响原始数据</li><li>toref—-&gt;引用，修改响应式数据，会影响原始数据</li><li>ref——&gt;数据发生改变，界面就会自动更新</li><li>toref—–&gt; 数据发生改变，界面也不会更新</li><li>torefs是影响多个参数        <h4 id="3-4-customRef"   >          <a href="#3-4-customRef" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-customRef" class="headerlink" title="3.4 customRef"></a>3.4 customRef</h4>      (1) customRef 用于自定义返回一个ref对象,可以显式地控制依赖追踪和触发响应,接受工厂函数<br>(2) 两个参数分别是用于追踪的 track 与用于触发响应的 trigger，并返回一个一个带有 get 和 set 属性的对象</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            track()追踪当前数据</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">            value=newValue</span><br><span class="line">            trigger() 触发响应,即更新界面</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">通过customRef返回的ref对象,和正常ref对象一样,通过x.value修改或读取值</span><br></pre></td></tr></table></div></figure>        <h4 id="3-5-provide和inject"   >          <a href="#3-5-provide和inject" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5-provide和inject" class="headerlink" title="3.5 provide和inject"></a>3.5 provide和inject</h4>      <ul><li>作用：用于父组件向子孙组件传递数据</li><li>使用方法：provide在父组件中返回要传给下级的数据，inject在需要使用这个数据的子辈组件或者孙辈等下级组件中注入数据。</li><li>使用场景：由于vue有$parent属性可以让子组件访问父组件。但孙组件想要访问祖先组件就比较困难。通过provide/inject可以轻松实现跨级访问父组件的数据        <h4 id="3-6-响应式判断"   >          <a href="#3-6-响应式判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-6-响应式判断" class="headerlink" title="3.6 响应式判断"></a>3.6 响应式判断</h4>      </li><li>isRef:检查一个值是否为一个ref对象</li><li>isReactive:检查一个值是否为一个reactive创建的响应式对象</li><li>isReadonly:检查一个值是否为一个readonly创建的只读代理</li><li>isProxy:检查一个值是否为一个reactive或者readonly方法创建的代理        <h3 id="四、Composition-API-新"   >          <a href="#四、Composition-API-新" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、Composition-API-新" class="headerlink" title="四、Composition API(新)"></a>四、Composition API(新)</h3>              <h4 id="4-1-Fragment"   >          <a href="#4-1-Fragment" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1-Fragment" class="headerlink" title="4.1 Fragment"></a>4.1 Fragment</h4>      </li><li>vue2中<template>必须有一个根组件，vue3不需要        <h4 id="4-2-Teleport瞬移"   >          <a href="#4-2-Teleport瞬移" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-Teleport瞬移" class="headerlink" title="4.2 Teleport瞬移"></a>4.2 Teleport瞬移</h4>      </li><li>提供一种干净的方法，让组件的html在父组件界面外的特定标签<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Teleport to=<span class="string">&quot;body&quot;</span>&gt;</span><br><span class="line">&lt;/Teleport&gt;</span><br></pre></td></tr></table></div></figure>        <h4 id="4-3-Supense不确定"   >          <a href="#4-3-Supense不确定" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-3-Supense不确定" class="headerlink" title="4.3 Supense不确定"></a>4.3 Supense不确定</h4>      </li><li>他们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</li><li>骨架屏</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、vite初始化项目&quot;   &gt;
          &lt;a href=&quot;#一、vite初始化项目&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#一、vite初始化项目&quot; class=&quot;headerlink&quot; title=&quot;一、vite初始化项目&quot;&gt;&lt;/a&gt;一、vite初始化项目&lt;/h3&gt;
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建vite项目，选择vue -&amp;gt; 选择vue-ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; npm init @vitejs/app myProject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; myProject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; npm run dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="vue" scheme="https://lovepink527.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue项目初始化配置</title>
    <link href="https://lovepink527.github.io/2022/01/10/vue%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>https://lovepink527.github.io/2022/01/10/vue%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</id>
    <published>2022-01-10T10:40:23.000Z</published>
    <updated>2022-01-15T13:40:02.556Z</updated>
    
    <content type="html"><![CDATA[<ul><li>根据脚手架创建一个项目</li><li>引入axios发送请求（axios封装）</li><li>配置拦截器（请求拦截器封装、相应拦截器封装、错误统一处理 注意http的error问题）<span id="more"></span> </li><li>api统一封装</li><li>正则表达式封装</li><li>store模块化封装</li><li>用户登陆的token信息放入store中</li><li>js-cookie轻量级api统一设置管理cookie</li><li>如果需要前端解决跨域，就在前端解决跨域</li><li>引入组件库</li><li>公共界面布局</li><li>分环境打包(测试)</li><li>项目优化</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;根据脚手架创建一个项目&lt;/li&gt;
&lt;li&gt;引入axios发送请求（axios封装）&lt;/li&gt;
&lt;li&gt;配置拦截器（请求拦截器封装、相应拦截器封装、错误统一处理 注意http的error问题）</summary>
    
    
    
    
    <category term="vue" scheme="https://lovepink527.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lovepink527.github.io/2022/01/07/hello-world/"/>
    <id>https://lovepink527.github.io/2022/01/07/hello-world/</id>
    <published>2022-01-07T03:05:09.539Z</published>
    <updated>2022-01-15T05:35:23.127Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p><span id="more"></span>         <h2 id="Quick-Start"   >          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post"   >          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server"   >          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files"   >          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites"   >          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;! This is your very first post. Check &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://hexo.io/docs/&quot; &gt;documentation&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://hexo.io/docs/troubleshooting.html&quot; &gt;troubleshooting&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt; or you can ask me on &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://github.com/hexojs/hexo/issues&quot; &gt;GitHub&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
