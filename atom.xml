<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lovepink</title>
  
  <subtitle>热爱可抵岁月漫长</subtitle>
  <link href="https://lovepink527.github.io/atom.xml" rel="self"/>
  
  <link href="https://lovepink527.github.io/"/>
  <updated>2022-03-04T03:28:35.579Z</updated>
  <id>https://lovepink527.github.io/</id>
  
  <author>
    <name>姜慧慧</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>charles安卓手机抓包</title>
    <link href="https://lovepink527.github.io/2022/01/26/charles%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/"/>
    <id>https://lovepink527.github.io/2022/01/26/charles%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/</id>
    <published>2022-01-26T06:38:21.000Z</published>
    <updated>2022-03-04T03:28:35.579Z</updated>
    
    <content type="html"><![CDATA[<p><strong>手机电脑同一局域网下</strong></p>        <h4 id="电脑操作"   >          <a href="#电脑操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#电脑操作" class="headerlink" title="电脑操作"></a>电脑操作</h4>      <ol><li>打开电脑charles软件</li><li>proxy -&gt; proxy setttings  -&gt;port 8080 -&gt; ok<span id="more"></span><img   src="https://img-blog.csdnimg.cn/3f73a12086a44840860cca765801181e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"><img   src="https://img-blog.csdnimg.cn/01822aea08254e46913a9a7be30b17e0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></li><li>help -&gt; ssl Proxying - install ……..<img   src="https://img-blog.csdnimg.cn/123936dc8dcc41e297bc7dedccb2bb05.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/69ce15ec62544033bb6239002aa0111e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></li><li>proxy - ssl proxying settings..<img   src="https://img-blog.csdnimg.cn/08128e6321ab4d9ab0099f6f7c3d5557.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/180131c27faa49d5ba07194982b4406e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/294ba0dc57b745f594a938083d6f660b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></li></ol>        <h5 id="手机操作"   >          <a href="#手机操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#手机操作" class="headerlink" title="手机操作"></a>手机操作</h5>      <ol><li><p>找到连接的wifi<br><img   src="https://img-blog.csdnimg.cn/8fe7b231efce4a2eab589eb0715068a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></p></li><li><p>点进去详情设置代理主机名和端口<br><img   src="https://img-blog.csdnimg.cn/b1d1592543124de5b0dadf42f8b9772e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></p></li><li><p>在手机浏览器输入chls.pro/ssl,下载证书</p></li><li><p>从设置中搜索找到从存储中安装证书<img   src="https://img-blog.csdnimg.cn/7970b5a3e39f470c8649e8c737b93a05.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></p></li></ol><p><img   src="https://img-blog.csdnimg.cn/b20d11f3855d4bd3924ebd05fea6f859.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;手机电脑同一局域网下&lt;/strong&gt;&lt;/p&gt;

        &lt;h4 id=&quot;电脑操作&quot;   &gt;
          &lt;a href=&quot;#电脑操作&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#电脑操作&quot; class=&quot;headerlink&quot; title=&quot;电脑操作&quot;&gt;&lt;/a&gt;电脑操作&lt;/h4&gt;
      &lt;ol&gt;
&lt;li&gt;打开电脑charles软件&lt;/li&gt;
&lt;li&gt;proxy -&amp;gt; proxy setttings  -&amp;gt;port 8080 -&amp;gt; ok</summary>
    
    
    
    
    <category term="项目工程" scheme="https://lovepink527.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue原理</title>
    <link href="https://lovepink527.github.io/2022/01/19/vue%E5%8E%9F%E7%90%86/"/>
    <id>https://lovepink527.github.io/2022/01/19/vue%E5%8E%9F%E7%90%86/</id>
    <published>2022-01-19T07:05:40.000Z</published>
    <updated>2022-03-04T03:26:55.739Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1-响应性"   >          <a href="#1-响应性" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-响应性" class="headerlink" title="1. 响应性"></a>1. 响应性</h4>      <p><strong>工作原理：</strong></p><ul><li>使用ES5的Object.definePropery，重写啦所有属性的getter和setter方法</li><li>实际上就是依赖跟踪的基本形式</li></ul><p><strong>简易getter和setter</strong></p><span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span>&#125;</span><br><span class="line">convert(obj)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> internalValue = obj[key]</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,key,&#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> internalValue</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">internalValue = newValue</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>依赖收集</strong></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">depend</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(activeUpdate)&#123;</span><br><span class="line"><span class="built_in">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">notify</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span>&#123;</span><br><span class="line">sub()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">activeUpdate = wrappedUpdate</span><br><span class="line">update()</span><br><span class="line">activeUpdate = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">autorun(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">dep.depend()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;updated&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">dep.notify()</span><br></pre></td></tr></table></div></figure><p><strong>迷你观察者</strong></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖收集</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span>()</span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">depend</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(updatevalue)&#123;</span><br><span class="line"><span class="built_in">this</span>.subscribers.add(updatevalue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">notify</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span><br><span class="line">sub()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> updatevalue</span><br><span class="line"><span class="comment">// 订阅信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span>(<span class="params">update</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">updatevalue = wrappedUpdate</span><br><span class="line">update()</span><br><span class="line">updatevalue = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新建依赖</span></span><br><span class="line"><span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"><span class="comment">//监听变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> value = obj[key]</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,key,&#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">value = newValue</span><br><span class="line">dep.notify()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"><span class="attr">count</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observe(state)</span><br><span class="line"></span><br><span class="line">autorun(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">dep.depend(()=&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;update&#x27;</span>)</span><br><span class="line"><span class="comment">//渲染</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">state.count ++</span><br></pre></td></tr></table></div></figure>        <h4 id="2-插件"   >          <a href="#2-插件" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-插件" class="headerlink" title="2. 插件"></a>2. 插件</h4>      <ul><li>vue.mixin</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin  = &gt;&#123;</span><br><span class="line"><span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.$options.rules)&#123;</span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">this</span>.$options.rules).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> rule = <span class="built_in">this</span>.$options.rules[key]</span><br><span class="line"><span class="built_in">this</span>.$watch[key,<span class="function">(<span class="params">newValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> result = rule.validate(newValue)</span><br><span class="line"><span class="keyword">if</span>(!result)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(rule.message)</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(myPlugin)</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">data</span>: &#123;<span class="attr">foo</span>: <span class="number">10</span>&#125;,</span><br><span class="line"><span class="attr">rules</span>:&#123;</span><br><span class="line"><span class="attr">validate</span>: <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">1</span>,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;foo must be greater than one&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="3-渲染"   >          <a href="#3-渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-渲染" class="headerlink" title="3. 渲染"></a>3. 渲染</h4>      <ul><li>修改原生dom复杂，产生啦虚拟dom</li><li>虚拟dom并不会更快，只是原生dom的局限性的一个方法</li><li>它提供啦以声明方式构成你想要的dom的结构</li><li>渲染逻辑从真实的dom中分离出来半截取消对真实dom来说等于没有执行<br><img   src="https://img-blog.csdnimg.cn/d84f687fca944d279cb8aa5301179cb0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></li></ul><p><strong>jsx和template区别</strong></p><ul><li>tempalte更静态有约束力，jsx更动态</li><li>渲染api h（‘div’,{class: ‘foo’},’some text’）</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">render (h) &#123;</span><br><span class="line"><span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[...])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>动态渲染标签组件</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">example</span> <span class="attr">:tag</span>=<span class="string">&quot;[&#x27;h1&#x27;,&#x27;h2&#x27;,&#x27;h3&#x27;]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.Component(<span class="string">&#x27;example&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">props</span>: [<span class="string">&#x27;tags&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">functional</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">render</span>(<span class="params">h,&#123;props: &#123;tags&#125;&#125;</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>,context.props.tags.map(<span class="function">(<span class="params">tag,i</span>) =&gt;</span> h(tag,i)))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">example</span> <span class="attr">:ok</span>=<span class="string">&quot;ok&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;ok = !ok&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> Foo = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">&#x27;div&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> Bar = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">&#x27;div&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.component(<span class="string">&#x27;example&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">props</span>: [<span class="string">&#x27;ok&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="built_in">this</span>.ok ? h(Foo) : h(Bar)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>: &#123;<span class="attr">ok</span>: <span class="literal">true</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></div></figure>        <h4 id="3-高阶组件"   >          <a href="#3-高阶组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-高阶组件" class="headerlink" title="3. 高阶组件"></a>3. 高阶组件</h4>      <ul><li>高阶组件对简单组件进行扩展，增强组件功能又不改变组件原来的功能<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;#app&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">smart-avatar</span> <span class="attr">username</span>=<span class="string">&quot;vuejs&quot;</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">smart-avatar</span>&gt;</span></span></span><br><span class="line">&lt;/app&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchURL</span> (<span class="params">username,cb</span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">cb(<span class="string">&#x27;https:avatar.githubusercontent.com/u/68342343?v=4&amp;s=200&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Avatar = &#123;</span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;src&#x27;</span>],</span><br><span class="line"><span class="attr">template</span>: <span class="string">&#x27;&lt;img :src = &quot;src&quot;&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withAvatarURL</span>(<span class="params">InnerComponent,fetchURL</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://via.placeholder.com/200*200&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">fetchUrl(<span class="built_in">this</span>.username,<span class="function"><span class="params">url</span>=&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.url = url</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h(InnerComponent,&#123;</span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line"><span class="attr">src</span>: <span class="built_in">this</span>.url,</span><br><span class="line"><span class="attr">attrs</span>: <span class="built_in">this</span>.$attrs</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="built_in">this</span>.$slots.default)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">components</span>: &#123;SmartAvatar&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="4-状态管理"   >          <a href="#4-状态管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-状态管理" class="headerlink" title="4. 状态管理"></a>4. 状态管理</h4>      </li><li>父组件传子组件用props</li><li>props有限制，当父组件需要传递的值改变时，props传到子组件的值并不会改变</li><li>共享对象</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"><span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> state</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>,<span class="built_in">this</span>.count)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">components</span>: &#123;Counter&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="function"><span class="title">inc</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">count： <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="function"><span class="title">inc</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">&#x27;div&#x27;</span>,state.count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">Counter</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="function"><span class="title">inc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">state.inc()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><ul><li>mutations</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params">&#123;state,mutations&#125;</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">data</span>: &#123; state &#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="function"><span class="title">commit</span>(<span class="params">mutationType</span>)</span>&#123;</span><br><span class="line">mutations[mutationType](<span class="built_in">this</span>.state)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = createStore(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">inc (state)&#123;</span><br><span class="line">state.count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">render (h) &#123;</span><br><span class="line"><span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>,store.state.count)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">components</span>: &#123; Counter&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="function"><span class="title">inc</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">store.commit(<span class="string">&#x27;inc&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="5-路由"   >          <a href="#5-路由" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-路由" class="headerlink" title="5.路由"></a>5.路由</h4>      <ul><li>我们需要在应用中将URL保存为响应式状态，为啦我们应用能够响应它的变化<figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#foo&quot;</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bar&quot;</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.hash</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line"><span class="attr">foo</span>: &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;foo&lt;/div&gt;&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">bar</span>: &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;bar&lt;/div&gt;&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p><strong>路由表</strong></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bar = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;bar&lt;/div&gt;&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> NotFound = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;not Found!&lt;/div&gt;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routeTable = &#123;</span><br><span class="line"><span class="string">&#x27;foo&#x27;</span>: Foo,</span><br><span class="line"><span class="string">&#x27;bar&#x27;</span>: Bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">&#125;,</span><br><span class="line">render (h) &#123;</span><br><span class="line"><span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>,&#123;</span><br><span class="line">h(routeTable(<span class="built_in">this</span>.url) || NotFound),</span><br><span class="line">h(<span class="string">&#x27;a&#x27;</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="attr">href</span>: <span class="string">&#x27;#foo&#x27;</span>&#125;&#125;, <span class="string">&#x27;foo&#x27;</span>),</span><br><span class="line">h(<span class="string">&#x27;a&#x27;</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="attr">href</span>: <span class="string">&#x27;#bar&#x27;</span>&#125;&#125;, <span class="string">&#x27;bar&#x27;</span>),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-响应性&quot;   &gt;
          &lt;a href=&quot;#1-响应性&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-响应性&quot; class=&quot;headerlink&quot; title=&quot;1. 响应性&quot;&gt;&lt;/a&gt;1. 响应性&lt;/h4&gt;
      &lt;p&gt;&lt;strong&gt;工作原理：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用ES5的Object.definePropery，重写啦所有属性的getter和setter方法&lt;/li&gt;
&lt;li&gt;实际上就是依赖跟踪的基本形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简易getter和setter&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="VUE" scheme="https://lovepink527.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>安卓和ios手机兼容</title>
    <link href="https://lovepink527.github.io/2022/01/17/%E5%AE%89%E5%8D%93%E5%92%8Cios%E6%89%8B%E6%9C%BA%E5%85%BC%E5%AE%B9/"/>
    <id>https://lovepink527.github.io/2022/01/17/%E5%AE%89%E5%8D%93%E5%92%8Cios%E6%89%8B%E6%9C%BA%E5%85%BC%E5%AE%B9/</id>
    <published>2022-01-17T01:54:58.000Z</published>
    <updated>2022-03-04T03:30:10.957Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1-iOS手机，textarea标签点击输入描述内容、键盘无法输入内容"   >          <a href="#1-iOS手机，textarea标签点击输入描述内容、键盘无法输入内容" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-iOS手机，textarea标签点击输入描述内容、键盘无法输入内容" class="headerlink" title="1.  iOS手机，textarea标签点击输入描述内容、键盘无法输入内容"></a>1.  iOS手机，textarea标签点击输入描述内容、键盘无法输入内容</h4>      <ul><li> 在textarea中加上<strong>style=”-webkit-user-select:text !important”</strong><span id="more"></span>        <h4 id="2-手机端input获得焦点后，页面左右漂浮"   >          <a href="#2-手机端input获得焦点后，页面左右漂浮" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-手机端input获得焦点后，页面左右漂浮" class="headerlink" title="2. 手机端input获得焦点后，页面左右漂浮"></a>2. 手机端input获得焦点后，页面左右漂浮</h4>      </li><li> index.html中加入<figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="3-安卓键盘遮挡input输入框"   >          <a href="#3-安卓键盘遮挡input输入框" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-安卓键盘遮挡input输入框" class="headerlink" title="3. 安卓键盘遮挡input输入框"></a>3. 安卓键盘遮挡input输入框</h4>      </li><li>input获取焦点设置盒子变大，页面增高，缓慢滑动到页面底部</li><li>input失去焦点设置盒子变小，页面变小，缓慢滑动到页面顶部<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handleBlur</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.$parent.formblur(<span class="built_in">this</span>.currentValue)</span><br><span class="line">           <span class="keyword">if</span>(!<span class="built_in">this</span>.isIos)&#123;</span><br><span class="line">               <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">               box.style.height = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">               <span class="built_in">window</span>.scrollTo(&#123;</span><br><span class="line">                       <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">                       <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span></span><br><span class="line">               &#125;);</span><br><span class="line">           &#125; </span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(!<span class="built_in">this</span>.isIos)&#123;</span><br><span class="line">               <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">               box.style.height = <span class="number">220</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">               <span class="built_in">window</span>.scrollTo(&#123;</span><br><span class="line">                       <span class="attr">top</span>: <span class="built_in">document</span>.body.scrollHeight,</span><br><span class="line">                       <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span></span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="4-ios中，input输入英文符号自动检测字符拼写错误"   >          <a href="#4-ios中，input输入英文符号自动检测字符拼写错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-ios中，input输入英文符号自动检测字符拼写错误" class="headerlink" title="4. ios中，input输入英文符号自动检测字符拼写错误"></a>4. ios中，input输入英文符号自动检测字符拼写错误</h4>      </li><li>input加入属性<strong>spellcheck =”false”</strong>        <h4 id="5-ios中，input输入限制200，maxlength不起作用可以输入表情"   >          <a href="#5-ios中，input输入限制200，maxlength不起作用可以输入表情" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-ios中，input输入限制200，maxlength不起作用可以输入表情" class="headerlink" title="5. ios中，input输入限制200，maxlength不起作用可以输入表情"></a>5. ios中，input输入限制200，maxlength不起作用可以输入表情</h4>      </li><li>input失焦点执行事件截取字符串</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value.length &gt; <span class="number">200</span>) &#123;</span><br><span class="line">  value = value.slice(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">  <span class="built_in">this</span>.currentValue = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-iOS手机，textarea标签点击输入描述内容、键盘无法输入内容&quot;   &gt;
          &lt;a href=&quot;#1-iOS手机，textarea标签点击输入描述内容、键盘无法输入内容&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-iOS手机，textarea标签点击输入描述内容、键盘无法输入内容&quot; class=&quot;headerlink&quot; title=&quot;1.  iOS手机，textarea标签点击输入描述内容、键盘无法输入内容&quot;&gt;&lt;/a&gt;1.  iOS手机，textarea标签点击输入描述内容、键盘无法输入内容&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt; 在textarea中加上&lt;strong&gt;style=”-webkit-user-select:text !important”&lt;/strong&gt;</summary>
    
    
    
    
    <category term="项目工程" scheme="https://lovepink527.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>前端安全-加密</title>
    <link href="https://lovepink527.github.io/2022/01/16/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-%E5%8A%A0%E5%AF%86/"/>
    <id>https://lovepink527.github.io/2022/01/16/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-%E5%8A%A0%E5%AF%86/</id>
    <published>2022-01-16T03:14:54.000Z</published>
    <updated>2022-03-04T04:18:56.759Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="1-密码安全"   >          <a href="#1-密码安全" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-密码安全" class="headerlink" title="1 密码安全"></a>1 密码安全</h3>              <h4 id="1-1-泄露渠道"   >          <a href="#1-1-泄露渠道" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-泄露渠道" class="headerlink" title="1.1 泄露渠道"></a>1.1 泄露渠道</h4>      <ul><li>数据库被盗</li><li>服务器被入侵</li><li>通讯被窃听</li><li>内部人员泄露</li><li>其他网站（撞库）<span id="more"></span>        <h4 id="1-2-防御"   >          <a href="#1-2-防御" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-防御" class="headerlink" title="1.2 防御"></a>1.2 防御</h4>      </li><li>严禁明文存储</li><li>单向变换</li><li>变换复杂度要求</li><li>密码复杂度要求</li><li>加盐（防止拆解）        <h4 id="1-3-哈希算法"   >          <a href="#1-3-哈希算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-哈希算法" class="headerlink" title="1.3 哈希算法"></a>1.3 哈希算法</h4>      </li></ul><p> <strong>明文-密文 一一对应</strong></p><ul><li>彩虹表记录明文密文一一对应表，容易破解</li><li>两次md5加密也容易破解</li><li>所以密码必须复杂</li></ul><hr><ul><li>加盐</li><li>加盐可以使密码更加难破解 <strong>加盐+ 字符串 + 密码</strong></li></ul><p><strong>雪崩效应 - 明文</strong>： 明文小幅度变化，密文加剧变化<br><strong>密文</strong>： 明文无法反推<br><strong>密文固定长度</strong>： md5 sha1 sha256</p>        <h4 id="1-4-密码传输安全"   >          <a href="#1-4-密码传输安全" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-密码传输安全" class="headerlink" title="1.4 密码传输安全"></a>1.4 密码传输安全</h4>      <ul><li>https传输</li><li>频次限制</li><li>前端加密意义有限- 传输层加密不会泄露 但不代表不能登录        <h4 id="1-5-摘要加密的复杂度"   >          <a href="#1-5-摘要加密的复杂度" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-5-摘要加密的复杂度" class="headerlink" title="1.5 摘要加密的复杂度"></a>1.5 摘要加密的复杂度</h4>      </li><li>md5反差        <h3 id="2-人机校验与验证码"   >          <a href="#2-人机校验与验证码" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-人机校验与验证码" class="headerlink" title="2 人机校验与验证码"></a>2 人机校验与验证码</h3>              <h4 id="2-1滑动验证码实现原理"   >          <a href="#2-1滑动验证码实现原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1滑动验证码实现原理" class="headerlink" title="2.1滑动验证码实现原理"></a>2.1滑动验证码实现原理</h4>      </li><li>服务端随机生成抠图和带有抠图阴影的背影图，服务器随机抠图的位置坐标</li><li>前端实现滑动交互，将抠图拼在抠图阴影之上，获取到用户滑动距离值</li><li>前端将用户滑动距离值传入服务器，服务端校验误差是否在容许范围中        <h3 id="3-HTTP协议配置"   >          <a href="#3-HTTP协议配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-HTTP协议配置" class="headerlink" title="3 HTTP协议配置"></a>3 HTTP协议配置</h3>      </li></ul><p><strong>https特点</strong>： 保密性、完成性 、 真实性<br>http + ssl  = https</p>        <h4 id="3-1-对称加密"   >          <a href="#3-1-对称加密" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-对称加密" class="headerlink" title="3.1 对称加密"></a>3.1 对称加密</h4>      <ul><li>问题：密钥丢失        <h4 id="3-2-非对称加密"   >          <a href="#3-2-非对称加密" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-非对称加密" class="headerlink" title="3.2 非对称加密"></a>3.2 非对称加密</h4>      </li><li>产生一堆密钥，私钥和公钥</li><li>公钥负责加密</li><li>私钥负责解密</li><li>私钥无法解开说明公钥无效 - 抵抗赖</li><li>计算复杂对性能有影响</li></ul><p><strong>ssh验证过程</strong><br><strong>https验证过程</strong>： 非对称与对称加密算法<br><strong>非对称与对称加密</strong>： 因为非对称不适合大量数据加密</p>        <h3 id="4-中间件helmet"   >          <a href="#4-中间件helmet" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-中间件helmet" class="headerlink" title="4 中间件helmet"></a>4 中间件helmet</h3>      <ul><li>强制使用安全连接</li><li>提供对于‘点击劫持’的保护</li><li>防止浏览器响应类型</li><li>防止收到跨脚本攻击</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-密码安全&quot;   &gt;
          &lt;a href=&quot;#1-密码安全&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-密码安全&quot; class=&quot;headerlink&quot; title=&quot;1 密码安全&quot;&gt;&lt;/a&gt;1 密码安全&lt;/h3&gt;
      
        &lt;h4 id=&quot;1-1-泄露渠道&quot;   &gt;
          &lt;a href=&quot;#1-1-泄露渠道&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-1-泄露渠道&quot; class=&quot;headerlink&quot; title=&quot;1.1 泄露渠道&quot;&gt;&lt;/a&gt;1.1 泄露渠道&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;数据库被盗&lt;/li&gt;
&lt;li&gt;服务器被入侵&lt;/li&gt;
&lt;li&gt;通讯被窃听&lt;/li&gt;
&lt;li&gt;内部人员泄露&lt;/li&gt;
&lt;li&gt;其他网站（撞库）</summary>
    
    
    
    
    <category term="项目工程" scheme="https://lovepink527.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>前端安全-常见的网络攻击</title>
    <link href="https://lovepink527.github.io/2022/01/16/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/"/>
    <id>https://lovepink527.github.io/2022/01/16/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/</id>
    <published>2022-01-16T02:15:35.000Z</published>
    <updated>2022-03-04T03:44:24.591Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="1-xss-攻击"   >          <a href="#1-xss-攻击" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-xss-攻击" class="headerlink" title="1. xss 攻击"></a>1. xss 攻击</h3>      <ul><li>跨站脚本攻击        <h4 id="1-1-反射性攻击"   >          <a href="#1-1-反射性攻击" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-反射性攻击" class="headerlink" title="1.1 反射性攻击"></a>1.1 <strong>反射性攻击</strong></h4>      </li><li>url参数直接注入（地址栏运行脚本）        <h4 id="1-2-影响"   >          <a href="#1-2-影响" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-影响" class="headerlink" title="1.2 影响"></a>1.2 <strong>影响</strong></h4>      </li><li> 利用虚假输入表单骗取用户个人信息</li><li>利用脚本窃取用户的cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求</li><li> 显示伪造的文章或图片<span id="more"></span>        <h4 id="1-3-存储型攻击"   >          <a href="#1-3-存储型攻击" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-存储型攻击" class="headerlink" title="1.3 存储型攻击"></a>1.3 <strong>存储型攻击</strong></h4>      </li><li>存储到DB读取时注入</li></ul>        <h4 id="1-4-防御"   >          <a href="#1-4-防御" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-防御" class="headerlink" title="1.4 防御"></a>1.4 <strong>防御</strong></h4>      <ul><li>ctx.set（‘X-XSS-Protect’，‘0’）</li><li>csp内容安全策略 ；白名单法：xss库，找到允许的代码；黑名单法：script和&lt;去掉，防御替换掉这些</li><li>httpOnly cookie,将cookie信息设置为只读<br>response.addHeader(“set-Cookie”,”uid=112;path=/;HttpOnly”)</li></ul>        <h3 id="2-csrf-攻击"   >          <a href="#2-csrf-攻击" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-csrf-攻击" class="headerlink" title="2. csrf 攻击"></a>2. csrf 攻击</h3>      <ul><li>跨站请求伪造</li><li>用户登录站点A,并再本地记录了cookie，用于被引入一个其他网站，其他网站拿去站点A的cookie,伪造请求        <h4 id="2-1-影响"   >          <a href="#2-1-影响" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-影响" class="headerlink" title="2.1 影响"></a>2.1 <strong>影响</strong></h4>      </li><li>利用用户登录状态</li><li>用户不知情</li><li>完成业务请求</li><li>盗取用户资金</li><li>冒充用户发帖背锅</li><li>损害网站声誉        <h4 id="2-2-防御"   >          <a href="#2-2-防御" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-防御" class="headerlink" title="2.2 防御"></a>2.2 <strong>防御</strong></h4>      </li><li>验证码</li><li>cookie值进行hash</li></ul>        <h3 id="3-点击劫持-clickjacking"   >          <a href="#3-点击劫持-clickjacking" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-点击劫持-clickjacking" class="headerlink" title="3. 点击劫持- clickjacking"></a>3. 点击劫持- clickjacking</h3>      <ul><li>视觉欺骗的攻击手段，攻击者需要将攻击网站通过iframe进行嵌套自己的网站中，并把iframe设置为透明，在页面透出一个按钮引诱用户点击        <h4 id="3-1-防御"   >          <a href="#3-1-防御" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-防御" class="headerlink" title="3.1 防御"></a>3.1 防御</h4>      </li><li>X-FRAME_OPTIONS是一个http响应头，三个可选值，DENY不允许有iframe，SAMEORIGIN统一域名下可以用iframe，ALLOW-FROM页面指定来源的iframe中展示</li><li>js方式：通过iframe方式加载页面时，直接不展示所有内容        <h3 id="4-SQL注入"   >          <a href="#4-SQL注入" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-SQL注入" class="headerlink" title="4. SQL注入"></a>4. SQL注入</h3>      </li><li>‘1’ or ‘1’ = ‘1’</li><li>网站可能会判断密码正确        <h4 id="4-1防御"   >          <a href="#4-1防御" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1防御" class="headerlink" title="4. 1防御"></a>4. 1防御</h4>      </li><li>对参数进行转码</li><li>用户提供最低权限</li><li>限制变量类型</li><li>数据库的特殊字符进行转义        <h3 id="5-OS命令"   >          <a href="#5-OS命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-OS命令" class="headerlink" title="5. OS命令"></a>5. OS命令</h3>      </li><li>掺入参数删除所有内容命令        <h3 id="6-请求劫持"   >          <a href="#6-请求劫持" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-请求劫持" class="headerlink" title="6. 请求劫持"></a>6. 请求劫持</h3>      </li><li>HTTP劫持：需要升级到HTTPS</li><li>DNS劫持：修改DNS解析结果        <h3 id="7-DDOS"   >          <a href="#7-DDOS" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-DDOS" class="headerlink" title="7. DDOS"></a>7. DDOS</h3>      </li><li>SYN Flood: tcp握手，握手两次不予理会，多次握手</li><li>HTTP flood：</li><li>备份网站 、http请求拦截、带宽扩容</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-xss-攻击&quot;   &gt;
          &lt;a href=&quot;#1-xss-攻击&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-xss-攻击&quot; class=&quot;headerlink&quot; title=&quot;1. xss 攻击&quot;&gt;&lt;/a&gt;1. xss 攻击&lt;/h3&gt;
      &lt;ul&gt;
&lt;li&gt;跨站脚本攻击
        &lt;h4 id=&quot;1-1-反射性攻击&quot;   &gt;
          &lt;a href=&quot;#1-1-反射性攻击&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-1-反射性攻击&quot; class=&quot;headerlink&quot; title=&quot;1.1 反射性攻击&quot;&gt;&lt;/a&gt;1.1 &lt;strong&gt;反射性攻击&lt;/strong&gt;&lt;/h4&gt;
      &lt;/li&gt;
&lt;li&gt;url参数直接注入（地址栏运行脚本）
        &lt;h4 id=&quot;1-2-影响&quot;   &gt;
          &lt;a href=&quot;#1-2-影响&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-2-影响&quot; class=&quot;headerlink&quot; title=&quot;1.2 影响&quot;&gt;&lt;/a&gt;1.2 &lt;strong&gt;影响&lt;/strong&gt;&lt;/h4&gt;
      &lt;/li&gt;
&lt;li&gt; 利用虚假输入表单骗取用户个人信息&lt;/li&gt;
&lt;li&gt;利用脚本窃取用户的cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求&lt;/li&gt;
&lt;li&gt; 显示伪造的文章或图片</summary>
    
    
    
    
    <category term="项目工程" scheme="https://lovepink527.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>chrom抓包安卓手机</title>
    <link href="https://lovepink527.github.io/2022/01/13/chrom%E6%8A%93%E5%8C%85%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/"/>
    <id>https://lovepink527.github.io/2022/01/13/chrom%E6%8A%93%E5%8C%85%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/</id>
    <published>2022-01-13T06:27:50.000Z</published>
    <updated>2022-03-04T03:32:56.937Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="chorm抓包原因："   >          <a href="#chorm抓包原因：" class="heading-link"><i class="fas fa-link"></i></a><a href="#chorm抓包原因：" class="headerlink" title="chorm抓包原因："></a>chorm抓包原因：</h4>      <ul><li>开发手机app等手机端项目，在手机端调试虽然有vconsole，但是想要把手机页面抓取到电脑上调试就很困难</li></ul>        <h4 id="chorm抓包步骤："   >          <a href="#chorm抓包步骤：" class="heading-link"><i class="fas fa-link"></i></a><a href="#chorm抓包步骤：" class="headerlink" title="chorm抓包步骤："></a>chorm抓包步骤：</h4>      <ol><li>手机打开设置<span id="more"></span></li><li>找到开发者选项（若没有可在‘其他设置’里找到，如果还没有找到，则需要在‘设置’中找到‘关于手机’，点击进去然后找到‘版本’，点击进去开启开发者模式，<strong>详细可看下面打开</strong>）</li><li>打开开发者选项</li><li>打开usb调试，传输文件模式</li><li>在谷歌浏览器中输入‘chrome://inspect/’(谷歌需要插件，谷歌安装setupVPN插件，<strong>详细可看下面插件步骤</strong>)</li><li>数据线链接电脑和手机</li><li>手机访问页面可以在谷歌浏览器中看到</li><li>点击‘inspect’按钮即可调试</li></ol>        <h4 id="打开开发者模式步骤："   >          <a href="#打开开发者模式步骤：" class="heading-link"><i class="fas fa-link"></i></a><a href="#打开开发者模式步骤：" class="headerlink" title="打开开发者模式步骤："></a>打开开发者模式步骤：</h4>      <ul><li>设置</li><li>关于手机</li><li>版本</li><li>点击版本多次</li></ul>        <h4 id="插件步骤："   >          <a href="#插件步骤：" class="heading-link"><i class="fas fa-link"></i></a><a href="#插件步骤：" class="headerlink" title="插件步骤："></a>插件步骤：</h4>      <ul><li>下载谷歌插件setupVPN,放到c盘和d盘位置</li><li>在谷歌-&gt;’更多工具’-&gt;‘扩展程序’中 </li></ul><p><img src="https://img-blog.csdnimg.cn/3ef99029c21a49ad8dcde3f983b1c792.png" alt="在这里插入图片描述"></p><ul><li>点击可上传扩展程序</li><li>扩展程序登录</li><li>随意选择地区</li><li>即可</li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;chorm抓包原因：&quot;   &gt;
          &lt;a href=&quot;#chorm抓包原因：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#chorm抓包原因：&quot; class=&quot;headerlink&quot; title=&quot;chorm抓包原因：&quot;&gt;&lt;/a&gt;chorm抓包原因：&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;开发手机app等手机端项目，在手机端调试虽然有vconsole，但是想要把手机页面抓取到电脑上调试就很困难&lt;/li&gt;
&lt;/ul&gt;

        &lt;h4 id=&quot;chorm抓包步骤：&quot;   &gt;
          &lt;a href=&quot;#chorm抓包步骤：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#chorm抓包步骤：&quot; class=&quot;headerlink&quot; title=&quot;chorm抓包步骤：&quot;&gt;&lt;/a&gt;chorm抓包步骤：&lt;/h4&gt;
      &lt;ol&gt;
&lt;li&gt;手机打开设置</summary>
    
    
    
    
    <category term="项目工程" scheme="https://lovepink527.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue3初体验</title>
    <link href="https://lovepink527.github.io/2021/12/27/vue3%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://lovepink527.github.io/2021/12/27/vue3%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2021-12-27T09:58:05.000Z</published>
    <updated>2022-03-04T01:55:36.871Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="一、vite初始化项目"   >          <a href="#一、vite初始化项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、vite初始化项目" class="headerlink" title="一、vite初始化项目"></a>一、vite初始化项目</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建vite项目，选择vue -&gt; 选择vue-ts</span></span><br><span class="line"> npm init @vitejs/app myProject</span><br><span class="line"><span class="comment"># 进入项目</span></span><br><span class="line"> <span class="built_in">cd</span> myProject</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"> npm install</span><br><span class="line"><span class="comment"># 启动项目</span></span><br><span class="line"> npm run dev</span><br></pre></td></tr></table></div></figure><span id="more"></span>         <h3 id="二、Composition-API-常用部分"   >          <a href="#二、Composition-API-常用部分" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、Composition-API-常用部分" class="headerlink" title="二、Composition API(常用部分)"></a>二、Composition API(常用部分)</h3>              <h4 id="2-1setup和ref"   >          <a href="#2-1setup和ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1setup和ref" class="headerlink" title="2.1setup和ref"></a>2.1setup和ref</h4>      <ul><li>setup是组合api中第一个要使用的函数</li><li>setup是组合api的入口函数</li><li>ref对象是一个函数，作用是定义一个响应式数据,返回一个ref对象，对象中有一个value属性，如果需要对修改，可以修改value</li><li>ref可以获取页面中的元素const inputRef = ref&lt;HTMLElement | null&gt;(null)</li><li>html是不需要用count.value取数据的，直接count就可以<figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="comment">//const number = 10 // 此时还不是相应数据</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>) <span class="comment">// ref对象是一个函数，作用是定义一个响应式数据,返回一个ref对象，对象中有一个value属性，如果需要对修改，可以修改value</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">count.value ++ </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个对象</span></span><br><span class="line"><span class="comment">//把变量和方法都暴露出去</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">count,</span><br><span class="line">updateCount</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul><p><strong>setup执行的时机</strong></p><ul><li>setup是beforeCreate声明周期回调之前就执行了，而且执行一次</li><li>由此可以推断出，在setup执行的时候，当前的组件还没有创建，也就意味着：组件实例对象this根本就不能使用</li><li>this是undefined,说明，就不能通过this再去调用data/computed/methods/props中的相关内容了</li><li>其实所有的composition API相关回调函数中也都不可以</li></ul><p><strong>setup返回值</strong></p><ul><li>setup中的返回值是一个对象，内部的属性和方法是给html模板使用</li><li>setup中的对象内部的属性和data函数中的return对象的属性都可以在html模板中使用</li><li>setup中的对象中的属性和data函数中的对象中的属性会合并为组件对象的属性</li><li>setup中的对象中的方法和methods对象中的方法会合并为组件的方法</li><li>在vue3中尽量不要混合使用data\setup\method\setup</li><li>setup不能是一个async函数：因为返回值不再是return的对象，而是promise，模板看不到return对象中的属性数据</li></ul><p><strong>setup中的参数</strong></p><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line"><span class="comment">// props参数，是一个对象，里面有父级组件向子集组件传递的数据，并且在子集组件中使用prop接收到的所有的属性</span></span><br><span class="line"><span class="comment">// 包含props配置声明且传入了的所有属性的对象</span></span><br><span class="line"><span class="comment">// context参数，是一个对象，里面有attar对象（获取当前组件标签上的所有的属性的对象，但是该属性是在props中没有声明接收的所有的需要的对象），emit方法（分发事件），slots对象（插槽）</span></span><br><span class="line"><span class="comment">// 包含没有在props配置中声明的属性的对象，相当于this.$attrs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2-2reactive的使用"   >          <a href="#2-2reactive的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2reactive的使用" class="headerlink" title="2.2reactive的使用"></a>2.2reactive的使用</h4>      <ul><li>作用：定义一个响应式复杂数据</li><li>使用proxy实现，通过代理对象操作源对象内部数据都是响应式的</li><li>const proxy = reactive(obj): 接口一个普通对象然后返回该普通对象的响应式代理器对象。</li><li>响应式转换是‘深层的’：会影响对象内部所有嵌套的属性</li><li><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 把复杂数据变成响应式数据</span></span><br><span class="line"><span class="comment">// 返回的是一个Proxy的代理对象，被代理者的对象就是obj对象</span></span><br><span class="line"><span class="comment">// user现在式代理对象，obj式目标对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line"><span class="attr">wife</span>:&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = reactive(obj)</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="keyword">const</span> updateUser = <span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 直接使用目标对象的方式来更新目标对象中的成员值，式不可能的，只能使用代理对象更新目标对象</span></span><br><span class="line">user.name = <span class="string">&#x27;小小&#x27;</span></span><br><span class="line">obj.gender = <span class="string">&#x27;男&#x27;</span> <span class="comment">//界面不会更新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">user,</span><br><span class="line">updateUser</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// user对象或者obj对象添加一个新的属性，删除一个新的属性</span></span><br><span class="line"><span class="comment">//  === 添加</span></span><br><span class="line"><span class="comment">// 对obj操作界面没有变化，对user操作界面会变化,obj确实变化啦</span></span><br><span class="line"><span class="comment">// 对user操作，obj也会会更新值，界面变化</span></span><br></pre></td></tr></table></div></figure>细节：        <h4 id="2-3vue2和vue3的响应式"   >          <a href="#2-3vue2和vue3的响应式" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3vue2和vue3的响应式" class="headerlink" title="2.3vue2和vue3的响应式"></a>2.3vue2和vue3的响应式</h4>      </li></ul><p><strong>vue2的响应式</strong><br><strong>核心：</strong></p><ul><li>对象：通过defineProperty对对象的已有的读取和修改进行拦截（监听和拦截）</li><li>数据：通过重写数组更新数组一些列更新元素的方式来实现元素修改的劫持</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data,<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p><strong>问题：</strong></p><ul><li>对象直接新添加的属性或者删除已有属性，界面不会自动更新</li><li>直接通过下标替换元素或者更新length,界面不会自动更新arr[1] = {}</li><li>所有有了后来的$set()方法实现响应式</li></ul><hr><p> <strong>vue3的响应式</strong><br><strong>核心：</strong></p><ul><li>通过Proxy(代理)：拦截对data任意属性的操作，包括属性值的读写，属性的添加、属性的删除等</li><li>通过Reflect(反射)：动态对被代理对象的相应属性进行特定的操作</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span><br><span class="line"><span class="comment">//拦截获取属性值</span></span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target,prop</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,prop)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//拦截设置属性值</span></span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target,prop,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,prop,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-4ref和reactive"   >          <a href="#2-4ref和reactive" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4ref和reactive" class="headerlink" title="2.4ref和reactive"></a>2.4ref和reactive</h4>      <ul><li>重要的响应式API(ref和reactive)</li><li>ref用来处理基本类型数据，react用来处理对象（递归深度响应式）</li><li>如果ref对象/数组，内部会自动将对象/数组转换为reactive的代理对象</li><li>ref内部：通过给value属性添加getter/setter来实现对数据的劫持</li><li>reactive内部：通过proxy来实现对对象内部所有数据的劫持，并通过Reflect来更新源目标对象</li><li>ref的数据操作，在js中要.value,在模板中不需要（内部自动解析）        <h4 id="2-5计算属性和监视"   >          <a href="#2-5计算属性和监视" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5计算属性和监视" class="headerlink" title="2.5计算属性和监视"></a>2.5计算属性和监视</h4>      </li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;东方&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;不败&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fullName = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> user.firstName + <span class="string">&#x27;_&#x27;</span> + user.lastName</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> fulName3 = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">//监视指定数据</span></span><br><span class="line">watch(user,<span class="function">(<span class="params">firstName,lastName</span>)=&gt;</span>&#123;</span><br><span class="line">fullName3.value = firstName + <span class="string">&#x27;_&#x27;</span> + lastName</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">// immediate默认执行一次，deep深度监视</span></span><br><span class="line"><span class="comment">//监视，不需要配置immediate，本身默认就会进行监视，默认执行一次</span></span><br><span class="line">watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">fullName3.value = user.firstName + <span class="string">&#x27;_&#x27;</span> + user.lastName</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// watch可以监视多个数据,如果不是响应式数据需要回调的方式</span></span><br><span class="line">watch([<span class="function">()=&gt;</span>firstName,<span class="function">()=&gt;</span>lastName,<span class="function">()=&gt;</span>fullName3],<span class="function">()=&gt;</span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">user,</span><br><span class="line">fullName,</span><br><span class="line">fullName3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2-6声明周期对比"   >          <a href="#2-6声明周期对比" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6声明周期对比" class="headerlink" title="2.6声明周期对比"></a>2.6声明周期对比</h4>              <h5 id="2-6-1与2-0的声明周期对应的组合API"   >          <a href="#2-6-1与2-0的声明周期对应的组合API" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-1与2-0的声明周期对应的组合API" class="headerlink" title="2.6.1与2.0的声明周期对应的组合API"></a>2.6.1与2.0的声明周期对应的组合API</h5>      <ul><li>beforeCreate -&gt; setup()</li><li>created -&gt; setup()</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onupdated</li><li>beforeDestroy改名啦 -&gt; onBeforeUnmount</li><li>destroyed改名啦 -&gt; onUnmounted</li><li>errCaptured -&gt; onErrorCaptured        <h5 id="2-6-2-新增钩子函数"   >          <a href="#2-6-2-新增钩子函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-2-新增钩子函数" class="headerlink" title="2.6.2 新增钩子函数"></a>2.6.2 新增钩子函数</h5>      </li><li>onRenderTracked</li><li>onRenderTriggred</li><li>两个钩子函数都接收一个DebuggerEvent,与watchEffect参数选项中的onTrack和onTrigger类似</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-7hook函数自定义"   >          <a href="#2-7hook函数自定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7hook函数自定义" class="headerlink" title="2.7hook函数自定义"></a>2.7hook函数自定义</h4>      <ul><li>类似于axios封装        <h4 id="2-8toRefs"   >          <a href="#2-8toRefs" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-8toRefs" class="headerlink" title="2.8toRefs"></a>2.8toRefs</h4>      </li><li>把一个响应式对象转换成普通对象，该普通对象的每个property都有一个ref</li><li>应用： 当从合成函数返回响应式对象时，toRefs非常有用，这样消费组件就可以在不丢失响应式的情况下，返回对象进行分解使用</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;自来也&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">47</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> &#123;name,age&#125; = toRefs(state)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">name.name += <span class="string">&#x27;==&#x27;</span></span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...state, <span class="comment">// 不是响应式的数据</span></span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="三、Composition-API-其他部分"   >          <a href="#三、Composition-API-其他部分" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、Composition-API-其他部分" class="headerlink" title="三、Composition API(其他部分)"></a>三、Composition API(其他部分)</h3>              <h4 id="3-1-shallowReactive-与-shallowRef"   >          <a href="#3-1-shallowReactive-与-shallowRef" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-shallowReactive-与-shallowRef" class="headerlink" title="3.1 shallowReactive 与 shallowRef"></a>3.1 shallowReactive 与 shallowRef</h4>      <ul><li>shallowReactive 浅劫持：只处理了对象内最外层属性的响应式</li><li>shallowRef  浅劫持： 只处理了value的响应式，不进行对象的reactive处理</li><li>如果一个对象数据，结构比较深，但变化时只是外层属性变化 shallowReactive</li><li>如果一个对象数据，后面会产生新的对象来替换 shallowRef        <h4 id="3-1-readonly和shallowReadonly"   >          <a href="#3-1-readonly和shallowReadonly" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-readonly和shallowReadonly" class="headerlink" title="3.1 readonly和shallowReadonly"></a>3.1 readonly和shallowReadonly</h4>      </li><li>readonly 深度只读</li><li>shallowReadonly 浅只读的        <h4 id="3-2-toRaw和markRaw"   >          <a href="#3-2-toRaw和markRaw" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-toRaw和markRaw" class="headerlink" title="3.2 toRaw和markRaw"></a>3.2 toRaw和markRaw</h4>      </li><li>toRaw 把代理对象变成普通对象，数据变化，界面不变化</li><li>markRaw 标记的对象数据，从此以后再也不能成为代理对象啦        <h4 id="3-3-toRef和ref"   >          <a href="#3-3-toRef和ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-toRef和ref" class="headerlink" title="3.3 toRef和ref"></a>3.3 toRef和ref</h4>      </li><li>ref—-&gt;复制，修改响应式数据不会影响原始数据</li><li>toref—-&gt;引用，修改响应式数据，会影响原始数据</li><li>ref——&gt;数据发生改变，界面就会自动更新</li><li>toref—–&gt; 数据发生改变，界面也不会更新</li><li>torefs是影响多个参数        <h4 id="3-4-customRef"   >          <a href="#3-4-customRef" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-customRef" class="headerlink" title="3.4 customRef"></a>3.4 customRef</h4>      (1) customRef 用于自定义返回一个ref对象,可以显式地控制依赖追踪和触发响应,接受工厂函数<br>(2) 两个参数分别是用于追踪的 track 与用于触发响应的 trigger，并返回一个一个带有 get 和 set 属性的对象</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            track()追踪当前数据</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">            value=newValue</span><br><span class="line">            trigger() 触发响应,即更新界面</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">通过customRef返回的ref对象,和正常ref对象一样,通过x.value修改或读取值</span><br></pre></td></tr></table></div></figure>        <h4 id="3-5-provide和inject"   >          <a href="#3-5-provide和inject" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5-provide和inject" class="headerlink" title="3.5 provide和inject"></a>3.5 provide和inject</h4>      <ul><li>作用：用于父组件向子孙组件传递数据</li><li>使用方法：provide在父组件中返回要传给下级的数据，inject在需要使用这个数据的子辈组件或者孙辈等下级组件中注入数据。</li><li>使用场景：由于vue有$parent属性可以让子组件访问父组件。但孙组件想要访问祖先组件就比较困难。通过provide/inject可以轻松实现跨级访问父组件的数据        <h4 id="3-6-响应式判断"   >          <a href="#3-6-响应式判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-6-响应式判断" class="headerlink" title="3.6 响应式判断"></a>3.6 响应式判断</h4>      </li><li>isRef:检查一个值是否为一个ref对象</li><li>isReactive:检查一个值是否为一个reactive创建的响应式对象</li><li>isReadonly:检查一个值是否为一个readonly创建的只读代理</li><li>isProxy:检查一个值是否为一个reactive或者readonly方法创建的代理        <h3 id="四、Composition-API-新"   >          <a href="#四、Composition-API-新" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、Composition-API-新" class="headerlink" title="四、Composition API(新)"></a>四、Composition API(新)</h3>              <h4 id="4-1-Fragment"   >          <a href="#4-1-Fragment" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1-Fragment" class="headerlink" title="4.1 Fragment"></a>4.1 Fragment</h4>      </li><li>vue2中<template>必须有一个根组件，vue3不需要        <h4 id="4-2-Teleport瞬移"   >          <a href="#4-2-Teleport瞬移" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-Teleport瞬移" class="headerlink" title="4.2 Teleport瞬移"></a>4.2 Teleport瞬移</h4>      </li><li>提供一种干净的方法，让组件的html在父组件界面外的特定标签<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Teleport to=<span class="string">&quot;body&quot;</span>&gt;</span><br><span class="line">&lt;/Teleport&gt;</span><br></pre></td></tr></table></div></figure>        <h4 id="4-3-Supense不确定"   >          <a href="#4-3-Supense不确定" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-3-Supense不确定" class="headerlink" title="4.3 Supense不确定"></a>4.3 Supense不确定</h4>      </li><li>他们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</li><li>骨架屏</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、vite初始化项目&quot;   &gt;
          &lt;a href=&quot;#一、vite初始化项目&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#一、vite初始化项目&quot; class=&quot;headerlink&quot; title=&quot;一、vite初始化项目&quot;&gt;&lt;/a&gt;一、vite初始化项目&lt;/h3&gt;
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建vite项目，选择vue -&amp;gt; 选择vue-ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; npm init @vitejs/app myProject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; myProject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; npm run dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="VUE" scheme="https://lovepink527.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基本使用</title>
    <link href="https://lovepink527.github.io/2021/12/17/TypeScript%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://lovepink527.github.io/2021/12/17/TypeScript%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-17T02:51:18.000Z</published>
    <updated>2022-03-04T01:55:23.821Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="一-初识TypeScript"   >          <a href="#一-初识TypeScript" class="heading-link"><i class="fas fa-link"></i></a><a href="#一-初识TypeScript" class="headerlink" title="一.初识TypeScript"></a>一.初识TypeScript</h3>              <h4 id="1-初识TypeScript"   >          <a href="#1-初识TypeScript" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-初识TypeScript" class="headerlink" title="1. 初识TypeScript"></a>1. 初识TypeScript</h4>      <ul><li>TypeScript是JavaScript类型的超集合，它可以编译成纯JavaScript<span id="more"></span>         <h4 id="2-安装TypeScript"   >          <a href="#2-安装TypeScript" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-安装TypeScript" class="headerlink" title="2. 安装TypeScript"></a>2. 安装TypeScript</h4>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局安装</span></span><br><span class="line">npm install -g typescript</span><br><span class="line"><span class="comment">// 查看版本</span></span><br><span class="line">tsc -v</span><br></pre></td></tr></table></div></figure>        <h4 id="3-TypeScript写程序"   >          <a href="#3-TypeScript写程序" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-TypeScript写程序" class="headerlink" title="3. TypeScript写程序"></a>3. TypeScript写程序</h4>              <h5 id="3-1hello-world程序"   >          <a href="#3-1hello-world程序" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1hello-world程序" class="headerlink" title="3.1hello world程序"></a>3.1hello world程序</h5>      </li><li>html中引入ts的文件，浏览器会报错，如果ts文件里面没有ts代码只有js代码，不会报错<figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;您好呀&#x27;</span> + str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;小甜甜&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(sayHi(text))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure></li><li>ts需要转义为js代码</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc 文件路径</span><br></pre></td></tr></table></div></figure><ul><li>html引入ts转义后的js代码</li></ul>        <h5 id="3-2-vscode自动编译"   >          <a href="#3-2-vscode自动编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-vscode自动编译" class="headerlink" title="3.2 vscode自动编译"></a>3.2 vscode自动编译</h5>      <ol><li>生成配置文件tsconfig.js</li></ol><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></div></figure><ol start="3"><li>修改tsconfig.json配置</li></ol><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;outDir&quot;</span>:<span class="string">&#x27;./js&#x27;</span>,</span><br><span class="line"><span class="string">&quot;strict&quot;</span>:<span class="literal">false</span> <span class="comment">// 不用严格模式</span></span><br></pre></td></tr></table></div></figure><ol start="5"><li>启动监视任务</li></ol><ul><li>终端-&gt; 运行任务 -&gt; 监视tsconfig.json</li></ul>        <h5 id="3-3-类型注解"   >          <a href="#3-3-类型注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-类型注解" class="headerlink" title="3.3 类型注解"></a>3.3 类型注解</h5>      <ul><li>是一种轻量级的为函数或者变量添加约束</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// str是string类型</span></span><br><span class="line"><span class="comment">// 如果是其他类型的会报错，智能的错误提示信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;床前明月光&#x27;</span> + str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">&#x27;疑似地上霜&#x27;</span></span><br><span class="line">showMsg(msg)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure>        <h5 id="3-4-接口"   >          <a href="#3-4-接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-接口" class="headerlink" title="3.4 接口"></a>3.4 接口</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口：是一种能力，一种约束而已</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">lastName</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出姓名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showFullName</span>(<span class="params">person: IPerson</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;东方&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>: <span class="string">&#x27;不败&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(showFullName(person))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure>        <h5 id="3-5-类"   >          <a href="#3-5-类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5-类" class="headerlink" title="3.5 类"></a>3.5 类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts中书写js中的类，演示效果</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="built_in">string</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义公共的字段（属性）</span></span><br><span class="line"><span class="attr">firstName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">lastName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">fullName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>,lastName:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//更新属性数</span></span><br><span class="line"><span class="built_in">this</span>.firstName = firstName</span><br><span class="line"><span class="built_in">this</span>.lastName = lastName</span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line"><span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showFullName</span>(<span class="params">Person:IPerson</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;诸葛&#x27;</span>,<span class="string">&#x27;孔明&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(showFullName(person))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></div></figure>        <h4 id="3-使用webpack打包TS"   >          <a href="#3-使用webpack打包TS" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-使用webpack打包TS" class="headerlink" title="3. 使用webpack打包TS"></a>3. 使用webpack打包TS</h4>      <ul><li>下载依赖<figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i -D typescript</span><br><span class="line">npm i -D webpack webpack-cli webpack-dev-server</span><br><span class="line">npm i -D html-webpack-plugin clean-webpack-plugin</span><br><span class="line">npm i -D ts-loader</span><br><span class="line">npm i -D cros-env</span><br></pre></td></tr></table></div></figure></li><li>入口JS:src/main.ts</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;hello webpack TS!&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>index页面：public/index.html</li><li>build/webpack.config.js        <h3 id="二-TypeScript常用类型"   >          <a href="#二-TypeScript常用类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#二-TypeScript常用类型" class="headerlink" title="二.TypeScript常用类型"></a>二.TypeScript常用类型</h3>              <h4 id="1-基础数据类型"   >          <a href="#1-基础数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-基础数据类型" class="headerlink" title="1.基础数据类型"></a>1.基础数据类型</h4>      </li><li>typescript支持与JavaScript几乎相同的数据类型        <h5 id="1-1-布尔型"   >          <a href="#1-1-布尔型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-布尔型" class="headerlink" title="1.1 布尔型"></a>1.1 布尔型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> isDone:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(isDone)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-2-数字类型"   >          <a href="#1-2-数字类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-数字类型" class="headerlink" title="1.2 数字类型"></a>1.2 数字类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> a1:<span class="built_in">number</span> = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-3-字符串类型"   >          <a href="#1-3-字符串类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-字符串类型" class="headerlink" title="1.3 字符串类型"></a>1.3 字符串类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> string1:<span class="built_in">string</span> = <span class="string">&#x27;hahahah&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(string1)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure></li></ul><p><strong>总结</strong></p><ul><li> 字符串和数值型能够拼接</li><li>ts中的变量一开始是什么类型，那么后期赋值也要什么类型，负责会报错        <h5 id="1-4-undefined和null"   >          <a href="#1-4-undefined和null" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-undefined和null" class="headerlink" title="1.4 undefined和null"></a>1.4 undefined和null</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">let</span> und:<span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> nul:<span class="literal">null</span>  = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> und = <span class="string">&#x27;hahah&#x27;</span></span><br><span class="line"><span class="keyword">let</span> nul = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(nul,und)</span><br><span class="line"><span class="comment">// undefined和null可以赋值其他数据类型</span></span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-4-数组和元组"   >          <a href="#1-4-数组和元组" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-数组和元组" class="headerlink" title="1.4 数组和元组"></a>1.4 数组和元组</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="comment">// 数组定义方式1</span></span><br><span class="line"><span class="keyword">let</span> arr1:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 数组定义方式2</span></span><br><span class="line"><span class="keyword">let</span> arr2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 数组定义后，里面的数据的类型必须和定义数组的时候的类型一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组类型:在定义数组的hi受，类型和数组的个数就已经限定</span></span><br><span class="line"><span class="keyword">let</span> arr3:[<span class="built_in">string</span>,<span class="built_in">number</span>,<span class="built_in">boolean</span>]= [<span class="string">&#x27;12&#x27;</span>,<span class="number">12</span>,<span class="literal">true</span>]</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-5-枚举"   >          <a href="#1-5-枚举" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-5-枚举" class="headerlink" title="1.5 枚举"></a>1.5 枚举</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="comment">// 枚举类型里面的每一个数据值都是元素，每个元素都有自己的编号，从0开始</span></span><br><span class="line"><span class="built_in">enum</span> Color&#123;red =<span class="number">1</span>,green =<span class="number">2</span>,blue =<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">let</span> color:Color = Color.red</span><br><span class="line"><span class="built_in">console</span>.log(color)</span><br><span class="line">)()</span><br></pre></td></tr></table></div></figure>        <h5 id="1-6-any和void"   >          <a href="#1-6-any和void" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-6-any和void" class="headerlink" title="1.6 any和void"></a>1.6 any和void</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="comment">// any可以存储任意类型</span></span><br><span class="line"><span class="keyword">let</span> a:<span class="built_in">any</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="comment">// 个数不确定，类型不确定</span></span><br><span class="line"><span class="keyword">let</span> b:<span class="built_in">any</span>[] = [<span class="number">12</span>,<span class="string">&#x27;23&#x27;</span>]</span><br><span class="line">)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// void 类型:在函数声明的时候，小括号的后面使用：void,代表的是该函数没有任何的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">consle.log(<span class="string">&#x27;hhhhhh&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"><span class="comment">// 定义void类型的变量，可以接收一个undefined的值，但是意义不是很大</span></span><br><span class="line"><span class="keyword">let</span> vd:<span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="1-7-object类型"   >          <a href="#1-7-object类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-7-object类型" class="headerlink" title="1.7 object类型"></a>1.7 object类型</h5>      </li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，参数是object类型，返回值也是object类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params">obj:<span class="built_in">object</span></span>):<span class="title">object</span> </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;kakakak&#x27;</span></span><br><span class="line"><span class="attr">age</span>:  <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getObj(&#123;<span class="attr">name</span>:<span class="string">&#x27;xxxxx&#x27;</span>&#125;))</span><br></pre></td></tr></table></div></figure>        <h5 id="1-8-联合类型、类型断言、类型推断"   >          <a href="#1-8-联合类型、类型断言、类型推断" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-8-联合类型、类型断言、类型推断" class="headerlink" title="1.8 联合类型、类型断言、类型推断"></a>1.8 联合类型、类型断言、类型推断</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 联合类型：表示取值为多个类型中的一个</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">str:<span class="built_in">number</span>|<span class="built_in">string</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型断言:告诉编译器，我知道自己是什么类型，也知道自己在干什么</span></span><br><span class="line"><span class="keyword">let</span> a:<span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">(&lt;<span class="built_in">string</span>&gt;a).length</span><br><span class="line">(a <span class="keyword">as</span> <span class="built_in">string</span>).length</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推断</span></span><br><span class="line"><span class="keyword">let</span> b</span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">b = <span class="string">&#x27;100&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-接口"   >          <a href="#2-接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h4>              <h5 id="2-1接口"   >          <a href="#2-1接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1接口" class="headerlink" title="2.1接口"></a>2.1接口</h5>      <ul><li>结构进行类型检查，使用接口来定义对象的类型</li><li>接口是对象的状态（属性）和行为（方法）的抽象（描述）</li><li>接口：是一种类型、是一种规范、是一种规则、是一个能力、是一个约束</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：创建人的对象，需要对人的属性进行一定的约束</span></span><br><span class="line"><span class="comment">// id是number类型，必须有，只读</span></span><br><span class="line"><span class="comment">// name是string类型，必须要</span></span><br><span class="line"><span class="comment">// age是number类型，必须有</span></span><br><span class="line"><span class="comment">// sex是string类型，可以没有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口，该接口作为person对象的类型使用，限定或者是约束该对象中的属性数据</span></span><br><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line"><span class="comment">// id只读</span></span><br><span class="line"><span class="keyword">readonly</span> id:<span class="built_in">number</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// ? 可有可无</span></span><br><span class="line">sex ?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个人</span></span><br><span class="line"><span class="keyword">const</span> person:IPerson = &#123;</span><br><span class="line"><span class="attr">id</span>:<span class="number">7</span></span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;姜慧慧&#x27;</span></span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readonly vs const</span></span><br><span class="line"><span class="comment">// 看是作为变量还是常量</span></span><br></pre></td></tr></table></div></figure>        <h5 id="2-2函数类型"   >          <a href="#2-2函数类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2函数类型" class="headerlink" title="2.2函数类型"></a>2.2函数类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为啦使用接口表示函数类型，我们需要给接口一个调用签名</span></span><br><span class="line"><span class="comment">// 它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型：通过接口的方式作为函数的类型来使用</span></span><br><span class="line"><span class="keyword">interface</span> ISearchFunc&#123;</span><br><span class="line"><span class="comment">//定义一个调用签名</span></span><br><span class="line">(source:<span class="built_in">string</span>,<span class="attr">substring</span>:<span class="built_in">string</span>):<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个函数，该类型就是上面定义的接口</span></span><br><span class="line"><span class="keyword">const</span> searchString:ISearchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">source:<span class="built_in">string</span>,substring:<span class="built_in">string</span></span>):<span class="title">boolean</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> source.search(substring) &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="built_in">console</span>.log(searchString(<span class="string">&#x27;abcdef&#x27;</span>,<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></div></figure>        <h5 id="2-3类类型"   >          <a href="#2-3类类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3类类型" class="headerlink" title="2.3类类型"></a>2.3类类型</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类 类型：类的类型，类的类型可以通过接口来实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> IFly&#123;</span><br><span class="line"><span class="comment">// 该方法没有任何的实现（方法中什么都没有）</span></span><br><span class="line">fly()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，这个类的类型就是上面定义的接口（实际上也可以理解为，IFly接口约束了当前的这个Person类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">IFly</span> </span>&#123;</span><br><span class="line"><span class="comment">// 实现接口中的方法</span></span><br><span class="line"><span class="function"><span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我会飞了，我是超人&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fly()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> ISwim &#123;</span><br><span class="line">swim()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，这个类的类型就是IFly和Swim(当前这个类可以实现多个接口，一个类同时也可以被多个接口进行约束)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> <span class="title">implements</span> <span class="title">IFly</span>,<span class="title">ISwim</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我会飞了，我是超人&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">swim</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我会游泳&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person2</span><br><span class="line">person.fly()</span><br><span class="line">person.swim()</span><br><span class="line"><span class="comment">// 总结：类可以通过接口的方式，来定义当前这个类的类型</span></span><br><span class="line"><span class="comment">// 类可以实现一个接口，类也可以实现多个接口，要注意，接口中的内容都要真正的实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口可以继承其他的多个接口</span></span><br><span class="line"><span class="comment">// 定义一个接口，继承其他的多个接口</span></span><br><span class="line"><span class="keyword">interface</span> IMyFlyAndSwim <span class="keyword">extends</span> IFly,Swim &#123;&#125;</span><br><span class="line"><span class="comment">// 定义一个类，直接实现IMyFlyAndSwim这个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span> <span class="title">implements</span> <span class="title">IMyFlyAndSwim</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;飞&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">swim</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;游&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person3 = <span class="keyword">new</span> Person3()</span><br><span class="line">person3.fly()</span><br><span class="line">person3.swim()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结：接口与接口之间叫做继承implement ，接口与类之间是实现用extends</span></span><br></pre></td></tr></table></div></figure>        <h4 id="3-类"   >          <a href="#3-类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-类" class="headerlink" title="3.类"></a>3.类</h4>              <h5 id="3-1类"   >          <a href="#3-1类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1类" class="headerlink" title="3.1类"></a>3.1类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类：可以理解为模板，通过模板实例化对象</span></span><br><span class="line"><span class="comment">//面向对象的编程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 定义构造函数：为啦将来实例化对象的时候，可以直接对属性的值进行初始化</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//更新对象中的属性数据</span></span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(大家好,str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;jenkins&#x27;</span>,<span class="number">15</span>)</span><br><span class="line">person.sayHi(<span class="string">&#x27;xixixi&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h5 id="3-2继承"   >          <a href="#3-2继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2继承" class="headerlink" title="3.2继承"></a>3.2继承</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承：类与类之间的关系</span></span><br><span class="line"><span class="comment">// 继承后类与类的叫法：</span></span><br><span class="line"><span class="comment">// A类继承了B类，那么A类叫子类，B类叫做基类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义实例方法</span></span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>,str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，继承Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strudent</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//调用的是父类中的构造函数，使用的是super</span></span><br><span class="line"><span class="built_in">super</span>(name,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以调用父类中的方法</span></span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我是学生类中的sayHi方法&#x27;</span>)</span><br><span class="line"><span class="comment">//调用父类中的sayHi方法</span></span><br><span class="line"><span class="built_in">super</span>.sayHi(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化Person</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;小明&#x27;</span>,<span class="number">14</span>)</span><br><span class="line">person.sayHi(<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> Student(<span class="string">&#x27;小工&#x27;</span>，<span class="number">23</span>)</span><br><span class="line">person2.sayHi()</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结：类与类之间如果要有继承关系需要使用extends</span></span><br><span class="line"><span class="comment">// 子类可以嗲用父类中的构造函数，使用的是super关键字（包括调用父类中的实例方法，也可以使用super）</span></span><br><span class="line"><span class="comment">// 子类可以重写父类中的方法</span></span><br></pre></td></tr></table></div></figure>        <h5 id="3-3多态"   >          <a href="#3-3多态" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3多态" class="headerlink" title="3.3多态"></a>3.3多态</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多态：父类型的引用指向了子类型的对象，不同类型的对象针对相同的方法，产生了不同的行为</span></span><br><span class="line"><span class="comment">// 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">run()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params">distance:<span class="built_in">number</span>=<span class="number">5</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;跑啦&#x27;</span> + distance + <span class="string">&#x27;米&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params">distance:<span class="built_in">number</span>=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;跑啦&#x27;</span> + distance + <span class="string">&#x27;米&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化父类对象</span></span><br><span class="line"><span class="keyword">const</span> ani:Animal = <span class="keyword">new</span> Animal(<span class="string">&#x27;动物&#x27;</span>)</span><br><span class="line">ani.run()</span><br><span class="line"><span class="comment">//实例化子类对象</span></span><br><span class="line"><span class="keyword">const</span> dog:Dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;狗&#x27;</span>)</span><br><span class="line">dog.run()</span><br><span class="line"><span class="comment">//实例化子类对象</span></span><br><span class="line"><span class="keyword">const</span> cat:Cat = <span class="keyword">new</span> Cat(<span class="string">&#x27;猫&#x27;</span>)</span><br><span class="line">cat.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类和子类的关系：父子关系，父类类型创建子类的对象</span></span><br><span class="line"><span class="keyword">const</span> dog1:Animal = <span class="keyword">new</span> Dog(<span class="string">&#x27;小黄&#x27;</span>)</span><br><span class="line">dog1.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数需要的参数是animal类型，dog1和cat都可以</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showRun</span>(<span class="params">ani:Animal</span>)</span>&#123;</span><br><span class="line">ani.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="3-4修饰符"   >          <a href="#3-4修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4修饰符" class="headerlink" title="3.4修饰符"></a>3.4修饰符</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰符（类中的成员的修饰符）：主要是描述类中的成员（属性，构造函数，方法）的可访问性</span></span><br><span class="line"><span class="comment">// public修饰符，类中的成员默认是这个修饰符，任何位置都可以访问</span></span><br><span class="line"><span class="comment">// private修饰符，类中的成员使用这个修饰符外部无法访问这个成员数据，子类也无法访问这个成员变量</span></span><br><span class="line"><span class="comment">// protected修饰符，类中的成员使用这个修饰符外部无法访问这个成员数据，但是子类**可以访问**这个成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// readonly修饰符：首先是一个关键字，对类中的属性成员进行修饰时候，该成员变量不能再外部随意更改；</span></span><br><span class="line"><span class="comment">//类中contructor可以修改</span></span><br><span class="line"><span class="comment">//但是如果类中的contructor没有参数，那么constructor也不可以修改</span></span><br><span class="line"><span class="comment">//类中的方法不可以修改。</span></span><br><span class="line"><span class="comment">// 构造函数中的name参数，一旦使用readonly进行修饰后，那么Person中就有啦一个name属性成员</span></span><br><span class="line"><span class="comment">// 构造函数中的name参数，一旦使用public进行修饰后，那么Person中就有啦一个公共name属性成员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 定义构造函数：为啦将来实例化对象的时候，可以直接对属性的值进行初始化</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">readonly</span> name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//更新对象中的属性数据</span></span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">sayHi</span>(<span class="params">str:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(大家好,str,<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;jenkins&#x27;</span>,<span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></div></figure>        <h5 id="3-5存取器"   >          <a href="#3-5存取器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5存取器" class="headerlink" title="3.5存取器"></a>3.5存取器</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存取器：让我们可以有效地控制对 对象中的成员的访问，通过getters和setters进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部可以传姓氏和姓名数据，同时使用set和get控制姓名的数据，外部可可以进行修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">lastName</span>:<span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>,lastName:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.firstName = firstName</span><br><span class="line"><span class="built_in">this</span>.lastName = lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取器</span></span><br><span class="line"><span class="keyword">get</span> <span class="title">fullName</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.firstName +  <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置器</span></span><br><span class="line"><span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">val</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> names = val.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.firstName = <span class="built_in">this</span>.names[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">this</span>.lastName = <span class="built_in">this</span>.names[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person:Person = <span class="keyword">new</span> Person(<span class="string">&#x27;东方&#x27;</span>,<span class="string">&#x27;不败&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.fullNAME())</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="3-6静态成员"   >          <a href="#3-6静态成员" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-6静态成员" class="headerlink" title="3.6静态成员"></a>3.6静态成员</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态成员：在类中通过static修饰的属性或者方法，那么就是静态的属性和静态的方法</span></span><br><span class="line"><span class="comment">// 静态成员在使用的时候是通过类名，的这种语法来调用的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//类中默认有一个内置的name静态属性</span></span><br><span class="line"><span class="keyword">static</span> name1 :<span class="built_in">string</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 此时this是实例对象,name1是静态属性，不能通过实例对象直接调用到</span></span><br><span class="line"><span class="comment">//this.name1 = name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过类名，静态属性的方法可以访问该成员变量</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.name1)</span><br><span class="line"><span class="comment">// 通过类名，静态属性的方法来设置该成员数据</span></span><br><span class="line">Person.name1 = <span class="string">&#x27;佐助&#x27;</span></span><br><span class="line"><span class="comment">// 通过类名，静态方法的方式来调用内部的静态的 方法</span></span><br><span class="line">Person.sayHi</span><br></pre></td></tr></table></div></figure>        <h5 id="3-7抽象类"   >          <a href="#3-7抽象类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-7抽象类" class="headerlink" title="3.7抽象类"></a>3.7抽象类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类：包含抽象方法（抽象方法一般没有任何的具体内容的实现），也可以包含实例方法，抽象类是不能被实例化，为啦让子类进行实例化和实现内部的抽象方法</span></span><br><span class="line"><span class="comment">// 抽象类的目的和作用都是为子类服务的</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">//抽象属性</span></span><br><span class="line"><span class="comment">// abstract name:string</span></span><br><span class="line"><span class="comment">// 抽象方法不能有具体的实现</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//实例方法</span></span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能实例化抽象类的对象</span></span><br><span class="line"><span class="comment">// 定义一个子类（派生类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">//重新的实现抽象类中的方法，此时这个方法是当前Dog的实例方法</span></span><br><span class="line"><span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;真好吃&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化Dog的对象</span></span><br><span class="line"><span class="keyword">const</span> dog:Dog = <span class="keyword">new</span> Dog()</span><br><span class="line">dog.eat()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="4-函数"   >          <a href="#4-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h4>              <h5 id="4-1函数"   >          <a href="#4-1函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1函数" class="headerlink" title="4.1函数"></a>4.1函数</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：封装了一些重复使用的代码，在需要的时候直接调用即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函数，函数表达式</span></span><br><span class="line"><span class="keyword">const</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ts</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函数，函数表达式</span></span><br><span class="line"><span class="keyword">const</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数完成写法</span></span><br><span class="line"><span class="comment">// (x:number,y:number) =&gt; number是函数的类型</span></span><br><span class="line"><span class="keyword">const</span> add3:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span> (<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="4-2可选参数和默认参数、剩余参数"   >          <a href="#4-2可选参数和默认参数、剩余参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2可选参数和默认参数、剩余参数" class="headerlink" title="4.2可选参数和默认参数、剩余参数"></a>4.2可选参数和默认参数、剩余参数</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选参数和默认参数</span></span><br><span class="line"><span class="keyword">const</span> getFullName = <span class="function"><span class="keyword">function</span>(<span class="params">firstName:<span class="built_in">string</span> = <span class="string">&#x27;东方&#x27;</span>,lastName?:<span class="built_in">string</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> firstName + <span class="string">&#x27;-&#x27;</span> +  lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剩余参数(rest参数)</span></span><br><span class="line"><span class="comment">// ...args：string[]表示剩余参数在args,必须放在最后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">str:<span class="built_in">string</span>,...args:<span class="built_in">string</span>[]</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">showMsg(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="4-3函数重载"   >          <a href="#4-3函数重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-3函数重载" class="headerlink" title="4.3函数重载"></a>4.3函数重载</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数重载：函数名字不同，函数的参数和个数不同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">string</span>,x:<span class="built_in">string</span></span>):<span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span></span></span><br><span class="line"><span class="function"><span class="function"></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">string</span>|<span class="built_in">number</span>,y:<span class="built_in">string</span>|<span class="built_in">number</span></span>):<span class="title">string</span>|<span class="title">number</span> </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;string&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">x</span> + <span class="title">y</span></span></span><br><span class="line"><span class="function">&#125;<span class="title">else</span> <span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;number&#x27;</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不符合规范的会报错</span></span><br></pre></td></tr></table></div></figure>        <h4 id="5-泛型"   >          <a href="#5-泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-泛型" class="headerlink" title="5.泛型"></a>5.泛型</h4>              <h5 id="5-1泛型"   >          <a href="#5-1泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-1泛型" class="headerlink" title="5.1泛型"></a>5.1泛型</h5>      <ul><li>泛型：在定义函数、接口、类的时候不能预先确定要使用的数据的类型，而是在使用函数、接口、类的时候才能确定数据的类型</li></ul><figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 定义一个函数</span><br><span class="line">- <span class="comment">//需求：可以传入任意类型的数组，返回来的是存储这个任意类型数据的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T,count:<span class="built_in">number</span></span>):<span class="title">T</span>[] </span>&#123;</span><br><span class="line"><span class="comment">//根据数据和数量产生一个数组</span></span><br><span class="line"><span class="keyword">const</span> arr:<span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt;count;i ++)&#123;</span><br><span class="line">arr.push(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = getArr&lt;<span class="built_in">number</span>&gt;(<span class="number">200</span>,<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="5-2多个泛型参数"   >          <a href="#5-2多个泛型参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-2多个泛型参数" class="headerlink" title="5.2多个泛型参数"></a>5.2多个泛型参数</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;(<span class="params">value1:K,value2:V</span>):[<span class="title">K</span>,<span class="title">V</span>]</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [value1,value2]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = getMsg&lt;<span class="built_in">string</span>,<span class="built_in">number</span>&gt;(<span class="string">&#x27;jack&#x27;</span>,<span class="number">123</span>)</span><br></pre></td></tr></table></div></figure>        <h5 id="5-3泛型接口"   >          <a href="#5-3泛型接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-3泛型接口" class="headerlink" title="5.3泛型接口"></a>5.3泛型接口</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口：在定义接口时，为接口中的属性或方法定义泛型类型，在使用接口时，再指定具体的泛型类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求：定义一个类，用来存储用户的相关信息（id,姓名，年龄）</span></span><br><span class="line"><span class="comment">// 通过一个类的实例对象调用相关的方法可以添加多个用户信息对象，调用getUserId方法可以根据id获取某个用户信息对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> IBaseCRUD&lt;T&gt;&#123;</span><br><span class="line"><span class="attr">data</span>: <span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line">add:<span class="function">(<span class="params">t:T</span>) =&gt;</span> T</span><br><span class="line"><span class="attr">getUserId</span>:<span class="function">(<span class="params">id:<span class="built_in">number</span></span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个用户信息的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">id?:<span class="built_in">number</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line"><span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类，可以针对用户的信息对象进行增加及查询的操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCRUD</span> <span class="title">implements</span> <span class="title">IBaseCRUD</span>&lt;<span class="title">user</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 用来保存多个User类型的用户信息对象</span></span><br><span class="line"><span class="attr">data</span>:<span class="built_in">Array</span>&lt;User&gt;&#123;</span><br><span class="line"><span class="comment">//方法用来存储用户信息对象的</span></span><br><span class="line">add(user:User):User &#123;</span><br><span class="line">user.id = <span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random()</span><br><span class="line"><span class="built_in">this</span>.data.push(user)</span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法保存id查询指定的用户信息对象</span></span><br><span class="line">getUserId(id:<span class="built_in">number</span>)=&gt; User&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.data.find(<span class="function"><span class="params">user</span> =&gt;</span> user.id === id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化添加用户信息对象的类UserCRUD</span></span><br><span class="line"><span class="keyword">const</span> userCRUD:UserCRUD = <span class="keyword">new</span> UserCRUD()</span><br><span class="line">userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;jack&#x27;</span>,<span class="number">20</span>))</span><br><span class="line"><span class="keyword">const</span> &#123;id&#125; = userCRUD.add(<span class="string">&#x27;tom&#x27;</span>,<span class="number">17</span>)</span><br><span class="line"><span class="keyword">const</span> user = userCRUD.getUserId(id)</span><br><span class="line"><span class="built_in">console</span>.log(user)</span><br></pre></td></tr></table></div></figure>        <h5 id="5-4泛型类"   >          <a href="#5-4泛型类" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-4泛型类" class="headerlink" title="5.4泛型类"></a>5.4泛型类</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个类，类中的属性值的类型是不确定，方法中的参数及返回值的类型也不确定</span></span><br><span class="line"><span class="comment">// 定义一个泛型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericName</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 默认的属性的值的类型是泛型类型</span></span><br><span class="line"><span class="attr">defaultValue</span>: T</span><br><span class="line"><span class="attr">add</span>:<span class="function">(<span class="params">x:T,y:T</span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例化类的对象的时候，再确定泛型的类型</span></span><br><span class="line"><span class="keyword">const</span> g1:GenericNumber&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line"><span class="comment">// 设置属性值</span></span><br><span class="line">g1.defaultValue = <span class="number">100</span></span><br><span class="line"><span class="comment">// 相加的方法</span></span><br><span class="line">g1.add = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+ y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例化类的对象的时候，再确定泛型的类型</span></span><br><span class="line"><span class="keyword">const</span> g2:GenericNumber&lt;<span class="built_in">string</span>&gt; = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line"><span class="comment">// 设置属性值</span></span><br><span class="line">g1.defaultValue = <span class="string">&#x27;&#x27;</span>哈哈哈</span><br><span class="line"><span class="comment">// 相加的方法</span></span><br><span class="line">g1.add = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+ y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="5-5泛型约束"   >          <a href="#5-5泛型约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-5泛型约束" class="headerlink" title="5.5泛型约束"></a>5.5泛型约束</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果我们直接对一个泛型参数取length属性，会报错，因为这个泛型根本就不知道它有这个属性</span></span><br><span class="line"><span class="comment">// 定义一个接口，来约束</span></span><br><span class="line"><span class="keyword">interface</span> Ilength&#123;</span><br><span class="line"><span class="comment">// 接口中有一个属性length</span></span><br><span class="line"><span class="attr">length</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Ilength</span>&gt;(<span class="params">x:T</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getLength&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;what are you no sha lei&#x27;</span>))</span><br></pre></td></tr></table></div></figure>        <h4 id="6-其他"   >          <a href="#6-其他" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h4>              <h5 id="6-1声明文件"   >          <a href="#6-1声明文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-1声明文件" class="headerlink" title="6.1声明文件"></a>6.1声明文件</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> JQuery:(selector:<span class="built_in">string</span>)</span><br><span class="line"><span class="comment">//jquery里面如果有类型选择器必须为string,否则会报错</span></span><br><span class="line"><span class="comment">//可以按照对应的声明文件types/jquery</span></span><br></pre></td></tr></table></div></figure>        <h5 id="6-2内置对象"   >          <a href="#6-2内置对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-2内置对象" class="headerlink" title="6.2内置对象"></a>6.2内置对象</h5>      <figure class="highlight typescript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.ECMAScript内置对象</span></span><br><span class="line"><span class="comment">// 2.BOM和DOM内置对象</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一-初识TypeScript&quot;   &gt;
          &lt;a href=&quot;#一-初识TypeScript&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#一-初识TypeScript&quot; class=&quot;headerlink&quot; title=&quot;一.初识TypeScript&quot;&gt;&lt;/a&gt;一.初识TypeScript&lt;/h3&gt;
      
        &lt;h4 id=&quot;1-初识TypeScript&quot;   &gt;
          &lt;a href=&quot;#1-初识TypeScript&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-初识TypeScript&quot; class=&quot;headerlink&quot; title=&quot;1. 初识TypeScript&quot;&gt;&lt;/a&gt;1. 初识TypeScript&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;TypeScript是JavaScript类型的超集合，它可以编译成纯JavaScript</summary>
    
    
    
    
    <category term="TS" scheme="https://lovepink527.github.io/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>react性能优化</title>
    <link href="https://lovepink527.github.io/2021/12/02/react%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://lovepink527.github.io/2021/12/02/react%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2021-12-02T08:22:29.000Z</published>
    <updated>2022-03-04T03:24:15.460Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1-react组件性能优化"   >          <a href="#1-react组件性能优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-react组件性能优化" class="headerlink" title="1.  react组件性能优化"></a>1.  react组件性能优化</h4>      <ul><li><strong>属性传递优化</strong></li></ul><ol><li>尽量不再render里面写函数用bind(this)</li><li>尽量不要再render,里面写对象，render会执行多次，会创建多个对象，没有销毁</li><li>传递组件数据，尽量少的传递数据，不要把所有数据都传递<span id="more"></span></li></ol><ul><li><strong>多组件优化</strong></li></ul><ol start="4"><li>父组件修改，子组件也会重新渲染，这样性能不好。定制shouldComponentUpdate或者继承React.PureComponent</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归比较，复杂度太高，不可接受</span></span><br><span class="line"><span class="comment">// react建议，只做浅层对比</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">other</span>:&#123;<span class="attr">title</span>: <span class="string">&#x27;imooc&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">other</span>:&#123;<span class="attr">title</span>: <span class="string">&#x27;imooc&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj == obj1) <span class="comment">// false,因为引用数据类型地址不一样</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareObj</span>(<span class="params">obj1,obj2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj1 == obj2)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Object</span>.key(obj1).length !== <span class="built_in">Object</span>.keys(obj2).length )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj1[k] !== obj2[k])&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">shouldcomponentUpdate</span>(<span class="params">nextProps,nextState</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(compareObj(nextProps,<span class="built_in">this</span>.props))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>immutable-js库</strong><br>优点：1.减少内存使用2.安全并发3.降级项目复杂度4.便于比较复杂数据，定制shouldCompoentUpdate方便5.时间旅行功能方便6.函数式编程<br>缺点：学习成本、库的大小、对先有项目入侵太严重（新项目可以，老项目需要评估）</p><ul><li>seamless-immutable  比较小<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心，把哈希值拿出来做对比</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="built_in">Map</span>,is&#125; <span class="keyword">from</span> <span class="string">&#x27;immutable&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Map</span>(&#123;<span class="string">&#x27;name&#x27;</span>:imooc&#125;,<span class="string">&#x27;course&#x27;</span>: <span class="built_in">Map</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;react+redux&#x27;</span>&#125;))</span><br><span class="line"><span class="keyword">let</span> obj1 = obj.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;woniu&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj.get(<span class="string">&#x27;course&#x27;</span>) == obj.get(<span class="string">&#x27;course&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === obj1) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.state = <span class="built_in">Map</span>(&#123;<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;imooc&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">this</span>.setState(<span class="built_in">this</span>.state.set(<span class="string">&#x27;num&#x27;</span>,<span class="built_in">this</span>.state.get(<span class="string">&#x27;num&#x27;</span>) + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">shouldcomponentUpdate</span>(<span class="params">nextProps,nextState</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> is(nextProps,<span class="built_in">this</span>.props)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li></ul><ol start="5"><li>查看性能 地址后面加上** /react_perf **</li></ol><ul><li><strong>key</strong>        <h4 id="2-redux性能优化"   >          <a href="#2-redux性能优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-redux性能优化" class="headerlink" title="2.redux性能优化"></a>2.redux性能优化</h4>      </li><li> reselect优化redux选择器         <h5 id="动画解决方案"   >          <a href="#动画解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#动画解决方案" class="headerlink" title="动画解决方案"></a>动画解决方案</h5>      </li></ul><p><strong>React动画实现</strong></p><ul><li>ant Motion</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rc-queue-anim --save</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-react组件性能优化&quot;   &gt;
          &lt;a href=&quot;#1-react组件性能优化&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-react组件性能优化&quot; class=&quot;headerlink&quot; title=&quot;1.  react组件性能优化&quot;&gt;&lt;/a&gt;1.  react组件性能优化&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属性传递优化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;尽量不再render里面写函数用bind(this)&lt;/li&gt;
&lt;li&gt;尽量不要再render,里面写对象，render会执行多次，会创建多个对象，没有销毁&lt;/li&gt;
&lt;li&gt;传递组件数据，尽量少的传递数据，不要把所有数据都传递</summary>
    
    
    
    
    <category term="REACT" scheme="https://lovepink527.github.io/tags/REACT/"/>
    
  </entry>
  
  <entry>
    <title>项目构建</title>
    <link href="https://lovepink527.github.io/2021/12/01/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <id>https://lovepink527.github.io/2021/12/01/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</id>
    <published>2021-12-01T06:19:54.000Z</published>
    <updated>2022-03-04T03:22:32.788Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1-理解npm、yarn依赖包管理的原理，两者的区别"   >          <a href="#1-理解npm、yarn依赖包管理的原理，两者的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-理解npm、yarn依赖包管理的原理，两者的区别" class="headerlink" title="1.理解npm、yarn依赖包管理的原理，两者的区别"></a>1.理解npm、yarn依赖包管理的原理，两者的区别</h4>      <ul><li><p>npm必须首先遍历所有的项目依赖关系，然后再决定如何生成扁平的node_modules目录结构。npm必须为所有使用到的模块构建一个完整的依赖关系树，这是一个耗时的操作，是npm安装速度慢的一个很重要的原因。</p><span id="more"></span></li><li>        <h4 id="2-可以使用npm运行自定义脚本"   >          <a href="#2-可以使用npm运行自定义脚本" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-可以使用npm运行自定义脚本" class="headerlink" title="2.可以使用npm运行自定义脚本"></a>2.可以使用npm运行自定义脚本</h4>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json文件</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack -w&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p><strong>package.json</strong>文件中的字段script的每一个属性都是一个自定义的脚本命令。</p></li><li><p>使用<em><strong>npm run script</strong>执行脚本的时候都会创建一个</em>*shell**，然后在shell中执行指定的脚本。</p></li><li><p>这个shell会将当前项目的可执行依赖目录（即node_modules/.bin）添加到环境变量path中，当执行之后之后再恢复原样。就是说脚本命令中的依赖名会直接找到node_modules/.bin下面的对应脚本，而不需要加上路径。</p></li></ul>        <h4 id="3-理解Babel、ESLint、webpack等工具在项目中承担的作用"   >          <a href="#3-理解Babel、ESLint、webpack等工具在项目中承担的作用" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-理解Babel、ESLint、webpack等工具在项目中承担的作用" class="headerlink" title="3.理解Babel、ESLint、webpack等工具在项目中承担的作用"></a>3.理解Babel、ESLint、webpack等工具在项目中承担的作用</h4>      <ul><li><p><strong>Babel</strong>是一个工具链，主要用于将 <strong>ECMAScript 2015+</strong> 版本的代码转换为向后兼容JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p></li><li><p><strong>ESLint</strong>实在JS代码中识别和报告模式匹配的工具，目标是<strong>保证代码的一致性和避免错误</strong>。</p></li><li><p><strong>Webpack</strong>是为前端开发设计的<strong>自动化打包工具</strong>，能够对项目中的<strong>js、css、图片</strong>等资源进行打包（其中js可以直接打包，其他类型资源需要各自对应的loader支持），相比于传统的grunt、gulp等构建工具，webpack在打包js代码时，能够识别多种模块化语法，进行模块化打包。</p>        <h4 id="4-ESLint规则检测原理，常用的ESLint配置"   >          <a href="#4-ESLint规则检测原理，常用的ESLint配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-ESLint规则检测原理，常用的ESLint配置" class="headerlink" title="4.ESLint规则检测原理，常用的ESLint配置"></a>4.ESLint规则检测原理，常用的ESLint配置</h4>      </li><li><p>ESLint 的核心是由各种 rule 组成的集合</p></li><li><p>配置文件:配置文件在项目根目录里，名文件以.eslintrc.*为名。</p></li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="comment">//设置&quot;script&quot;（默认）或&quot;module&quot;如果你的代码是在ECMAScript中的模块。</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style</span></span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="string">&#x27;html&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="string">&#x27;rules&#x27;</span>: &#123;</span><br><span class="line">    <span class="comment">// allow paren-less arrow functions</span></span><br><span class="line">    <span class="string">&#x27;arrow-parens&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow async-await</span></span><br><span class="line">    <span class="string">&#x27;generator-star-spacing&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="number">2</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123; </span><br><span class="line">      <span class="comment">// 允许声明未使用变量</span></span><br><span class="line">      <span class="string">&quot;vars&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">      <span class="comment">// 参数不检查</span></span><br><span class="line">      <span class="string">&quot;args&quot;</span>: <span class="string">&quot;none&quot;</span> </span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// 关闭语句强制分号结尾</span></span><br><span class="line">    <span class="string">&quot;semi&quot;</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="comment">//空行最多不能超过100行</span></span><br><span class="line">    <span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">0</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">100</span>&#125;],</span><br><span class="line">    <span class="comment">//关闭禁止混用tab和空格</span></span><br><span class="line">    <span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">0</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>配置参数</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">    <span class="string">&quot;规则名&quot;</span>: [规则值, 规则配置]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>规则值</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;off&quot;</span>或者<span class="number">0</span>    <span class="comment">//关闭规则关闭</span></span><br><span class="line"><span class="string">&quot;warn&quot;</span>或者<span class="number">1</span>    <span class="comment">//在打开的规则作为警告（不影响退出代码）</span></span><br><span class="line"><span class="string">&quot;error&quot;</span>或者<span class="number">2</span>    <span class="comment">//把规则作为一个错误（退出代码触发时为1）</span></span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">&quot;no-array-constructor&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">&quot;no-bitwise&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">&quot;no-catch-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">&quot;no-class-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">&quot;no-cond-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">&quot;no-console&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">&quot;no-const-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">&quot;no-constant-condition&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">&quot;no-continue&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">&quot;no-control-regex&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">&quot;no-debugger&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">&quot;no-delete-var&quot;</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">&quot;no-div-regex&quot;</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">&quot;no-dupe-args&quot;</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">&quot;no-duplicate-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">&quot;no-else-return&quot;</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-character-class&quot;</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-label&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">&quot;no-ex-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">&quot;no-extend-native&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">&quot;no-extra-bind&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">&quot;no-extra-boolean-cast&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">&quot;no-fallthrough&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">&quot;no-floating-decimal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">&quot;no-implicit-coercion&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">&quot;no-implied-eval&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">&quot;no-inner-declarations&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;functions&quot;</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">&quot;no-invalid-regexp&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">&quot;no-invalid-this&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">&quot;no-irregular-whitespace&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">&quot;no-iterator&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">&quot;no-labels&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">&quot;no-lone-blocks&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">&quot;no-lonely-if&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">&quot;no-loop-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">&quot;no-mixed-requires&quot;</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">&quot;no-multi-str&quot;</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">&quot;no-native-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">&quot;no-negated-in-lhs&quot;</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">&quot;no-nested-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">&quot;no-new&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">&quot;no-new-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">&quot;no-new-object&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">&quot;no-new-require&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">&quot;no-new-wrappers&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">&quot;no-obj-calls&quot;</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">&quot;no-octal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">&quot;no-octal-escape&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">&quot;no-param-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">&quot;no-path-concat&quot;</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">&quot;no-process-env&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">&quot;no-process-exit&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">&quot;no-proto&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">&quot;no-regex-spaces&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">&quot;no-restricted-modules&quot;</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">&quot;no-script-url&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">&quot;no-sequences&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">&quot;no-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">&quot;no-shadow-restricted-names&quot;</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">&quot;no-spaced-func&quot;</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">&quot;no-sync&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">&quot;no-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">&quot;no-throw-literal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line"><span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">&quot;no-undef-init&quot;</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">&quot;no-undefined&quot;</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">&quot;no-unexpected-multiline&quot;</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">&quot;no-unneeded-ternary&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">&quot;no-unreachable&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">&quot;no-unused-expressions&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">&quot;no-useless-call&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">&quot;no-void&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">&quot;no-warning-comments&quot;</span>: [<span class="number">1</span>, &#123; <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>], <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">&quot;no-with&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">&quot;brace-style&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;1tbs&quot;</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">&quot;callback-return&quot;</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">&quot;comma-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;complexity&quot;</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">&quot;dot-location&quot;</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;dot-notation&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">&quot;eol-last&quot;</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">&quot;generator-star-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">&quot;guard-for-in&quot;</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">&quot;handle-callback-err&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">&quot;id-length&quot;</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">&quot;init-declarations&quot;</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">&quot;key-spacing&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">&quot;lines-around-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">&quot;max-depth&quot;</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">&quot;max-len&quot;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">&quot;max-nested-callbacks&quot;</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">&quot;max-params&quot;</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">&quot;max-statements&quot;</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">&quot;new-cap&quot;</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">&quot;new-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">&quot;newline-after-var&quot;</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">&quot;object-curly-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">&quot;object-shorthand&quot;</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">&quot;one-var&quot;</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">&quot;operator-assignment&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">&quot;operator-linebreak&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;after&quot;</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">&quot;prefer-const&quot;</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">&quot;prefer-spread&quot;</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">&quot;prefer-reflect&quot;</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">&quot;quotes&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>],<span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;quote-props&quot;</span>:[<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">&quot;radix&quot;</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">&quot;id-match&quot;</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">&quot;require-yield&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">&quot;semi&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">&quot;semi-spacing&quot;</span>: [<span class="number">0</span>, &#123;<span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">&quot;sort-vars&quot;</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">&quot;space-after-keywords&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">&quot;space-before-blocks&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-before-function-paren&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-in-parens&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-return-throw-case&quot;</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">&quot;space-unary-ops&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">&quot;spaced-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">&quot;strict&quot;</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">&quot;use-isnan&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">&quot;valid-jsdoc&quot;</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">&quot;valid-typeof&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">&quot;vars-on-top&quot;</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">&quot;wrap-iife&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;inside&quot;</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">&quot;wrap-regex&quot;</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">&quot;yoda&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></div></figure>        <h4 id="5-Babel的核心原理，可以自己编写一个Babel插件"   >          <a href="#5-Babel的核心原理，可以自己编写一个Babel插件" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-Babel的核心原理，可以自己编写一个Babel插件" class="headerlink" title="5.Babel的核心原理，可以自己编写一个Babel插件"></a>5.Babel的核心原理，可以自己编写一个Babel插件</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/frontend_frank/article/details/102459790" >babel核心原理，编写插件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li><p>Babel 是一个  <strong>JavaScript 编译器</strong>。</p></li><li><p>注意很重要的一点就是， Babel 只是转译新标准引入的语法，比如：<strong>箭头函数</strong>、<strong>let / const</strong>、<strong>解构</strong></p></li><li><p>对于新标准引入的全局变量、部分原生对象新增的原型链上的方法，Babel 表示超纲了。<strong>全局变量</strong>、<strong>Promise</strong>、<strong>Symbol</strong>、<strong>WeakMap</strong>、<strong>Set</strong>、<strong>includes</strong>、<strong>generator 函数</strong>对于上面的这些 API， Babel 是不会转译的，需要引入  <strong>polyfill</strong> 来解决。</p></li><li><p>Babel 的编译过程和大多数其他语言的编译器相似，可以分为三个阶段：</p></li></ul><p><strong>解析</strong>（Parsing）：将代码字符串解析成抽象语法树。<br><strong>转换</strong>（Transformation）：对抽象语法树进行转换操作。<br><strong>生成</strong>（Code Generation）: 根据变换后的抽象语法树再生成代码字符串。</p>        <h4 id="6-可以配置一种前端代码兼容方案，如Polyfill"   >          <a href="#6-可以配置一种前端代码兼容方案，如Polyfill" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-可以配置一种前端代码兼容方案，如Polyfill" class="headerlink" title="6.可以配置一种前端代码兼容方案，如Polyfill"></a>6.可以配置一种前端代码兼容方案，如Polyfill</h4>      <ul><li>由于 Babel 假定你的代码将在 ES5 环境中执行，因此使用的都是 ES5 函数。如果你所使用的运行环境 对 ES5 的支持有限或不支持，例如低版本的 IE，那么就需要使用 @babel/polyfill 来满足需求        <h4 id="7-Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用"   >          <a href="#7-Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用" class="headerlink" title="7.Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用"></a>7.Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用</h4>      </li></ul><p><strong>编译原理</strong></p><ul><li>一切皆为模块，由于webpack只支持<strong>js</strong>文件，所以需要用<strong>loader</strong> 转换为webpack支持的模块，其中<strong>plugin</strong> 用于扩张webpack 的功能，在webpack构建生命周期的过程中，在合适的时机做了合适的事情。</li></ul><p><strong>构建流程</strong></p><ol><li><strong>初始化参数</strong>：从配置文件和Shell语句中读取与合并参数，得出最终的参数；</li><li><strong>开始编译</strong>：用上一步得到的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译；</li><li><strong>确定入口</strong>：根据配置中的entry找出所有的入口文件；</li><li><strong>编译模块</strong>：从入口文件出发，调用所有配置的Loader对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li><li><strong>完成模块编译</strong>：在经过第4步使用Loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li><li><strong>输出资源</strong>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li><li><strong>输出完成</strong>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ol><ul><li>在整个构建流程中，Webpack会在恰当的时机执行Plugin里定义的逻辑，从而完成Plugin插件的优化任务。</li></ul><p><strong>module</strong>：模块，在Webpack中一切皆模块，一个模块即为一个文件。Webpack会从Entry开始递归找出所有的依赖模块</p><p><strong>chunk</strong>：代码块，一个chunk由多个模块组成，它用于代码合并与分割</p><p><strong>bundle</strong>：由许多不同的模块生成，它包含已经经过加载和编译过程的源文件的最终版本。可以和chunk长的一模一样,但是大部分情况下他是多个chunk的集合</p>        <h4 id="8-可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins"   >          <a href="#8-可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins" class="headerlink" title="8.可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins"></a>8.可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://www.webpackjs.com/configuration/" >wepack网址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-理解npm、yarn依赖包管理的原理，两者的区别&quot;   &gt;
          &lt;a href=&quot;#1-理解npm、yarn依赖包管理的原理，两者的区别&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-理解npm、yarn依赖包管理的原理，两者的区别&quot; class=&quot;headerlink&quot; title=&quot;1.理解npm、yarn依赖包管理的原理，两者的区别&quot;&gt;&lt;/a&gt;1.理解npm、yarn依赖包管理的原理，两者的区别&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;npm必须首先遍历所有的项目依赖关系，然后再决定如何生成扁平的node_modules目录结构。npm必须为所有使用到的模块构建一个完整的依赖关系树，这是一个耗时的操作，是npm安装速度慢的一个很重要的原因。&lt;/p&gt;</summary>
    
    
    
    
    <category term="项目工程" scheme="https://lovepink527.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>react核心原理介绍</title>
    <link href="https://lovepink527.github.io/2021/11/30/react%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://lovepink527.github.io/2021/11/30/react%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-11-30T10:39:21.000Z</published>
    <updated>2022-03-04T03:21:06.907Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="虚拟dom"   >          <a href="#虚拟dom" class="heading-link"><i class="fas fa-link"></i></a><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3>      <p><img   src="https://img-blog.csdnimg.cn/d77e555d988a466abb51685aba15988f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></p><span id="more"></span><ul><li>在react里面生成dom树，更改数据时把原dom和新生成dom元素比较，找出更新的dom点，更新        <h3 id="生命周期"   >          <a href="#生命周期" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3>      <img   src="https://img-blog.csdnimg.cn/02623182c9344100a6fecfb3e8ea82bb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></li><li>定制shouldComponentUpdate(nextProps,nextState){if(nextState.num%5 == 0){return true} return false}        <h3 id="setState"   >          <a href="#setState" class="heading-link"><i class="fas fa-link"></i></a><a href="#setState" class="headerlink" title="setState"></a>setState</h3>      </li><li>在render里面不要用setState(),会死循环</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;虚拟dom&quot;   &gt;
          &lt;a href=&quot;#虚拟dom&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#虚拟dom&quot; class=&quot;headerlink&quot; title=&quot;虚拟dom&quot;&gt;&lt;/a&gt;虚拟dom&lt;/h3&gt;
      &lt;p&gt;&lt;img   src=&quot;https://img-blog.csdnimg.cn/d77e555d988a466abb51685aba15988f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16&quot; style=&quot;width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;&quot;  alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="REACT" scheme="https://lovepink527.github.io/tags/REACT/"/>
    
  </entry>
  
  <entry>
    <title>MVC模式与MVVC模式</title>
    <link href="https://lovepink527.github.io/2021/11/30/MVC%E6%A8%A1%E5%BC%8F%E4%B8%8EMVVC%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lovepink527.github.io/2021/11/30/MVC%E6%A8%A1%E5%BC%8F%E4%B8%8EMVVC%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-30T10:38:07.000Z</published>
    <updated>2022-03-04T03:12:46.531Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="MVC模式"   >          <a href="#MVC模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h4>      <ul><li>mvc是由三个单词的首字符组成的：分别是<strong>模型</strong>model-<strong>视图</strong>view-<strong>控制器</strong>controller</li><li>他是一种使用<strong>业务逻辑</strong>、<strong>数据</strong>、<strong>视图</strong>进行<strong>分离</strong>的方式来组织架构代码的一种模式。</li><li>复杂项目中改变数据，很难判断那里改变<span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MVC = &#123;&#125;</span><br><span class="line">MVC.model = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line"><span class="attr">sidebar</span>:[&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;sidebar1&#x27;</span>,</span><br><span class="line"><span class="attr">href</span>: <span class="string">&#x27;./a.html&#x27;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;sidebar2&#x27;</span>,</span><br><span class="line"><span class="attr">href</span>: <span class="string">&#x27;./b.html&#x27;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;sidebar3&#x27;</span>,</span><br><span class="line"><span class="attr">href</span>: <span class="string">&#x27;./c.html&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">getData</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> data[key]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">setData</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">data[key] = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br><span class="line">MVC.view = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> m = MVC.model</span><br><span class="line"><span class="keyword">var</span> view = &#123;</span><br><span class="line"><span class="attr">createSidebar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> data = m.getData(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">html += <span class="string">&#x27;&lt;div id=&quot;siderbar&quot;&gt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;data.length;i++)&#123;</span><br><span class="line">html += <span class="string">&#x27;&lt;div class=&quot;sidebar-item&quot; href=&quot;`+data[i].herf +`&quot;&gt;`+ data[i].title +`&lt;/a&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">html += <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = html</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">view[v]();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br><span class="line">MVC.ctrl = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> m = MVC.model</span><br><span class="line"><span class="keyword">var</span> v = MVC.view</span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line"><span class="attr">initSideBar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">v(<span class="string">&#x27;createSidebar&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">updateSideBar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">m.setDate(<span class="string">&#x27;sidebar&#x27;</span>,[&#123;<span class="attr">title</span>:<span class="string">&#x27;new sidebar&#x27;</span>, <span class="attr">herf</span>: <span class="string">&#x27;./aa.html&#x27;</span>&#125;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">MVC.ctrl.initSideBar()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">MVC.ctrl.updateSideBar()</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="MVVC模式"   >          <a href="#MVVC模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#MVVC模式" class="headerlink" title="MVVC模式"></a>MVVC模式</h4>      </li><li>mvvm模式在mvc模式下进行改造，实现的其重在数据驱动视图的一种设计模式<br><img   src="https://img-blog.csdnimg.cn/2654346975ea4c7fb89ebbe2bc7131e1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></li><li>如何去实现数据和视图绑定</li></ul><ol><li>需要知道那个数据改变啦，一般我们可以使用数据访问对象的方法。在vue中我们使用的是es5的对象访问属性get/set</li><li>需要知道修改的这个数据跟那个视图有关联，观察者模式。</li><li>修改视图<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习</span></span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line"><span class="attr">_a</span>: <span class="literal">undefined</span>,</span><br><span class="line"><span class="keyword">get</span> <span class="title">a</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> <span class="title">a</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line"><span class="built_in">this</span>._a = newVal</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test.a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test3 = &#123;<span class="attr">_a</span>:<span class="number">111</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(test3,<span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._a</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>._a = newVal</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(test3.a)</span><br><span class="line">test.a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(test3.a)</span><br></pre></td></tr></table></div></figure></li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*var data = &#123;</span></span><br><span class="line"><span class="comment">a:1</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">var dep = [] //收集消息，消息中心</span></span><br><span class="line"><span class="comment">var target = null //订阅者或者叫做观察者</span></span><br><span class="line"><span class="comment">Object.defineProperty(data,&#x27;a&#x27;,&#123;</span></span><br><span class="line"><span class="comment">get: function()&#123;</span></span><br><span class="line"><span class="comment">dep.push(target)</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">set: function(newVal)&#123;</span></span><br><span class="line"><span class="comment">for(var i = 0;i&lt;dep.length;i++)&#123;</span></span><br><span class="line"><span class="comment">dep[i]()</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">function watch(exp,fn)&#123;</span></span><br><span class="line"><span class="comment">target = fn</span></span><br><span class="line"><span class="comment">data[exp]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">watch(&#x27;a&#x27;,function()&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;我是监听a改变的函数&#x27;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">data.a = 2*/</span></span><br><span class="line"><span class="comment">//几个问题</span></span><br><span class="line"><span class="comment">// 1. 我们现在访问不到a,并且a的值需要_a暂存</span></span><br><span class="line"><span class="comment">// 2. 目前只做啦一个数据的收集工作</span></span><br><span class="line"><span class="comment">// 3. 如果再次访问属性的时候就会重复收集依赖</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> dep = [];</span><br><span class="line"><span class="keyword">var</span> value = data[key]</span><br><span class="line">object.defineProperty(data,key,&#123;</span><br><span class="line"><span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; dep.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[i]===target)&#123;</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dep.push(target)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(newVal !== value)&#123;</span><br><span class="line">value = newVal</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i &lt; dep.length; i++)&#123;</span><br><span class="line">dep[i]();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//var dep = [] //收集消息，消息中心</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="literal">null</span> <span class="comment">//订阅者或者叫做观察者</span></span><br><span class="line"><span class="comment">/*Object.defineProperty(data,&#x27;a&#x27;,&#123;</span></span><br><span class="line"><span class="comment">get: function()&#123;</span></span><br><span class="line"><span class="comment">dep.push(target)</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">set: function(newVal)&#123;</span></span><br><span class="line"><span class="comment">for(var i = 0;i&lt;dep.length;i++)&#123;</span></span><br><span class="line"><span class="comment">dep[i]()</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">`&lt;div&gt;&lt;h3&gt;想显示一些文案`</span>+ data.a +<span class="string">`&lt;/h3&gt;&lt;/div&gt;`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">exp,fn</span>)</span>&#123;</span><br><span class="line">target = fn</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> exp === <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">exp()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">data[exp]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//watch(&#x27;a&#x27;,render)</span></span><br><span class="line">watch(render,render)</span><br><span class="line">data.a = <span class="number">2</span></span><br><span class="line">data.b = <span class="number">3</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;MVC模式&quot;   &gt;
          &lt;a href=&quot;#MVC模式&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#MVC模式&quot; class=&quot;headerlink&quot; title=&quot;MVC模式&quot;&gt;&lt;/a&gt;MVC模式&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;mvc是由三个单词的首字符组成的：分别是&lt;strong&gt;模型&lt;/strong&gt;model-&lt;strong&gt;视图&lt;/strong&gt;view-&lt;strong&gt;控制器&lt;/strong&gt;controller&lt;/li&gt;
&lt;li&gt;他是一种使用&lt;strong&gt;业务逻辑&lt;/strong&gt;、&lt;strong&gt;数据&lt;/strong&gt;、&lt;strong&gt;视图&lt;/strong&gt;进行&lt;strong&gt;分离&lt;/strong&gt;的方式来组织架构代码的一种模式。&lt;/li&gt;
&lt;li&gt;复杂项目中改变数据，很难判断那里改变</summary>
    
    
    
    
    <category term="结构与算法" scheme="https://lovepink527.github.io/tags/%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-结构型设计模式</title>
    <link href="https://lovepink527.github.io/2021/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lovepink527.github.io/2021/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-30T10:37:16.000Z</published>
    <updated>2022-03-04T02:57:27.940Z</updated>
    
    <content type="html"><![CDATA[<p><strong>装饰模式、外观模式、享元模式、适配器模式、代理模式</strong></p>        <h4 id="1-装饰器模式"   >          <a href="#1-装饰器模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-装饰器模式" class="headerlink" title="1. 装饰器模式"></a>1. 装饰器模式</h4>      <ul><li>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。<span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.price = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">carWithHeatSeat</span>(<span class="params">carClass</span>)</span>&#123;</span><br><span class="line">carClass.hasHeatSet = <span class="literal">true</span>;</span><br><span class="line">carClass.price += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">carWithAutoMirror</span>(<span class="params">carClass</span>)</span>&#123;</span><br><span class="line">carClass.hasAutoMirror = <span class="literal">true</span></span><br><span class="line">carClass.price += <span class="number">0.8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car2 = <span class="keyword">new</span> Car()</span><br><span class="line"><span class="built_in">console</span>.log(car2.price)</span><br><span class="line">carWithHeatSeat(car2)</span><br><span class="line">carWithAutoMirror(car2)</span><br><span class="line"><span class="built_in">console</span>.log(car2.price)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-组合模式"   >          <a href="#2-组合模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-组合模式" class="headerlink" title="2. 组合模式"></a>2. 组合模式</h4>      </li><li>组合模式多个部分组合成一个整体</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表单组合</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//组合寄生继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subClass，superClass</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = superClass.prototype;</span><br><span class="line">subClass.prototype = <span class="keyword">new</span> F();</span><br><span class="line">subClass.prototype.constructor = subClass;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器基类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Container</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.children = []</span><br><span class="line"><span class="built_in">this</span>.element = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Container.prototype = &#123;</span><br><span class="line"><span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请重写init方法&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.children.push(child)</span><br><span class="line"><span class="built_in">this</span>.element.appendChild(child.element)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基于容器类创建表单容器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateForm</span>(<span class="params">id,method,action,parent</span>)</span>&#123;</span><br><span class="line">Container.call(<span class="built_in">this</span>);</span><br><span class="line"><span class="built_in">this</span>.id = id || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.method = method || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.action = action || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.parent = parent;</span><br><span class="line"><span class="built_in">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line">inheritPrototype(CreateForm,Container)</span><br><span class="line">CreateForm.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.element.id = <span class="built_in">this</span>.id</span><br><span class="line"><span class="built_in">this</span>.element.method = <span class="built_in">this</span>.method</span><br><span class="line"><span class="built_in">this</span>.element.action = <span class="built_in">this</span>.action</span><br><span class="line">&#125;</span><br><span class="line">CreateForm.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.parent.appendChild(<span class="built_in">this</span>.element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//行容器组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateLine</span>(<span class="params">className</span>)</span>&#123;</span><br><span class="line">Container.call(<span class="built_in">this</span>);</span><br><span class="line"><span class="built_in">this</span>.className = className === undefind ? <span class="string">&#x27;from-line&#x27;</span>:<span class="string">&#x27;form-line&#x27;</span>+ className</span><br><span class="line"><span class="built_in">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line">CreateLine.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.element.className = <span class="built_in">this</span>.className;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(CreateLine,Container)</span><br><span class="line"><span class="comment">//label</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateLabel</span>(<span class="params">text,forName</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.text = text || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.forName = forName || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line">CreateLabel.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.element.setAttribute(<span class="string">&#x27;for&#x27;</span>,<span class="built_in">this</span>.forName)</span><br><span class="line"><span class="built_in">this</span>.element.innerHTML = <span class="built_in">this</span>.text</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//input</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateInput</span>(<span class="params">type,id,name,defaultValue</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.type = type || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.id = id || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.name = name || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.defaultValue= defaultValue || <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">CreateInput.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.element.type = <span class="built_in">this</span>.type</span><br><span class="line"><span class="built_in">this</span>.element.id = <span class="built_in">this</span>.id</span><br><span class="line"><span class="built_in">this</span>.element.name = <span class="built_in">this</span>.name</span><br><span class="line"><span class="built_in">this</span>.element.value = <span class="built_in">this</span>.value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个from</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> CreateForm(<span class="string">&#x27;ower-form&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;/aaa.html&#x27;</span>,<span class="built_in">document</span>.body)</span><br><span class="line"><span class="comment">//增加一个行</span></span><br><span class="line"><span class="keyword">var</span> userLine = <span class="keyword">new</span> CreateLine().add(<span class="keyword">new</span> CreateLabel(<span class="string">&#x27;用户名&#x27;</span>,<span class="string">&#x27;user&#x27;</span>)).add(<span class="keyword">new</span> CreateInput(<span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> pwdLine = <span class="keyword">new</span> CreateLine().add(<span class="keyword">new</span> CreateLabel(<span class="string">&#x27;密码&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>)).add(<span class="keyword">new</span> CreateInput(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> sumbitLine = <span class="keyword">new</span> CreateLine().add(<span class="keyword">new</span> CreateInput(<span class="string">&#x27;submit&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;登录&#x27;</span>))</span><br><span class="line"><span class="comment">//把行放入form</span></span><br><span class="line">form.add(userLine).add(pwdLine).add(sumbitLiine)</span><br><span class="line"><span class="comment">//渲染</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;装饰模式、外观模式、享元模式、适配器模式、代理模式&lt;/strong&gt;&lt;/p&gt;

        &lt;h4 id=&quot;1-装饰器模式&quot;   &gt;
          &lt;a href=&quot;#1-装饰器模式&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-装饰器模式&quot; class=&quot;headerlink&quot; title=&quot;1. 装饰器模式&quot;&gt;&lt;/a&gt;1. 装饰器模式&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。</summary>
    
    
    
    
    <category term="结构与算法" scheme="https://lovepink527.github.io/tags/%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://lovepink527.github.io/2021/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lovepink527.github.io/2021/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-30T10:36:42.000Z</published>
    <updated>2022-03-04T02:56:06.005Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1-熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等"   >          <a href="#1-熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等" class="headerlink" title="1.熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等"></a>1.熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等</h4>      <p><strong>代理模式</strong></p><ul><li>代理模式的定义是：为一个对象提供一个代用品或者占位符，以便控制对它的访问。<span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有代理模式</span></span><br><span class="line">    <span class="keyword">var</span> Fans = &#123;</span><br><span class="line">        <span class="function"><span class="title">flower</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            star.reception(<span class="string">&quot;花&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> star = &#123;</span><br><span class="line">        <span class="attr">reception</span>:<span class="function"><span class="keyword">function</span>(<span class="params">gift</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;收到粉丝的:&quot;</span>+gift);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fans.flower();   <span class="comment">//收到粉丝的:花</span></span><br></pre></td></tr></table></div></figure></li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理模式</span></span><br><span class="line"><span class="comment">//可以把礼物进行过渡</span></span><br><span class="line"><span class="keyword">var</span> Fans = &#123;</span><br><span class="line">        <span class="function"><span class="title">flower</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            Agent.reception(<span class="string">&quot;花&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Agent = &#123;</span><br><span class="line">        <span class="attr">reception</span>:<span class="function"><span class="keyword">function</span>(<span class="params">gift</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;粉丝送的:&quot;</span>+gift);   <span class="comment">//粉丝送的：花</span></span><br><span class="line">            star.reception(<span class="string">&quot;花&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> star = &#123;</span><br><span class="line">        <span class="attr">reception</span>:<span class="function"><span class="keyword">function</span>(<span class="params">gift</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;收到粉丝的:&quot;</span>+gift);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fans.flower();    <span class="comment">//收到粉丝的：花</span></span><br></pre></td></tr></table></div></figure>        <h4 id="2-发布订阅模式和观察者模式的异同以及实际应用"   >          <a href="#2-发布订阅模式和观察者模式的异同以及实际应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-发布订阅模式和观察者模式的异同以及实际应用" class="headerlink" title="2.发布订阅模式和观察者模式的异同以及实际应用"></a>2.发布订阅模式和观察者模式的异同以及实际应用</h4>      <ul><li>观察者模式中<strong>主体</strong>和<strong>观察者</strong>是<strong>互相感知</strong>的，发布-订阅模式是借助<strong>第三方</strong>来<strong>实现调度</strong>的，<strong>发布者</strong>和<strong>订阅者</strong>之间<strong>互不感知</strong></li></ul><p><img   src="https://img-blog.csdnimg.cn/12539f69e0df483ea2333e2652c0c0c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></p>        <h4 id="3-可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用"   >          <a href="#3-可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用" class="headerlink" title="3.可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用"></a>3.可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用</h4>      <ul><li>promise 链式调用</li><li>观察者模式，视图监听</li><li>redux 发布订阅模式</li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等&quot;   &gt;
          &lt;a href=&quot;#1-熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等&quot; class=&quot;headerlink&quot; title=&quot;1.熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等&quot;&gt;&lt;/a&gt;1.熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等&lt;/h4&gt;
      &lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理模式的定义是：为一个对象提供一个代用品或者占位符，以便控制对它的访问。</summary>
    
    
    
    
    <category term="结构与算法" scheme="https://lovepink527.github.io/tags/%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-行为型模式</title>
    <link href="https://lovepink527.github.io/2021/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lovepink527.github.io/2021/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-30T10:35:18.000Z</published>
    <updated>2022-03-04T02:54:02.547Z</updated>
    
    <content type="html"><![CDATA[<p><strong>迭代器模式、中介者模式、观察者模式、访问者模式、职责链模式、策略模式、发布/订阅模式</strong></p>        <h4 id="1-观察者模式"   >          <a href="#1-观察者模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-观察者模式" class="headerlink" title="1. 观察者模式"></a>1. 观察者模式</h4>      <ul><li>定义一个主体和众多个体，主体为消息中心，里面有各种各样的消息，众多的个体可以订阅不同的消息，当未来中心发布某条消息时，订阅过他的个体就会得到通知。<span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msgCenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _msg = &#123;&#125; <span class="comment">//存储消息</span></span><br><span class="line"><span class="comment">//var _msg = &#123;</span></span><br><span class="line"><span class="comment">//&#x27;carinfo&#x27;:[person1.aleradyRegister.carInfo]</span></span><br><span class="line"><span class="comment">//&#x27;newinfo&#x27;:[person2.aleradyRegister.carInfo]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="comment">//用来订阅消息</span></span><br><span class="line"><span class="attr">register</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!_msg[type])&#123;</span><br><span class="line">_msg[type].push(fn)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">_msg[type] = [fn]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//用来发布消息</span></span><br><span class="line"><span class="attr">fire</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type,args</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!_msg[type])&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line"><span class="attr">type</span>:type</span><br><span class="line"><span class="attr">args</span>:args || []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i &lt; _msg[type].length;i++)&#123;</span><br><span class="line">_msg[type][i](event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//用来取消订阅的消息</span></span><br><span class="line"><span class="attr">cancel</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!_msg[type])&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i &lt; _msg[type].length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(_msg[type][i] == fn)&#123;</span><br><span class="line">_msg[type].splice(i,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.alreadyRegister = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.register = <span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line">msgCenter.register(type,fn)</span><br><span class="line"><span class="built_in">this</span>.alreadyRegister(type) = fn</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.cancel = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">msgCenter.cancel(type,<span class="built_in">this</span>.alreadyRegister(type))</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">this</span>.alreadyRegister(type)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person3 = <span class="keyword">new</span> Person()</span><br><span class="line">person1.register(<span class="string">&#x27;carInfo&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person1收到消息&#x27;</span> + e.type+ <span class="string">&#x27;的消息,消息内容是&#x27;</span>+e.args.info)</span><br><span class="line">&#125;)</span><br><span class="line">person2.register(<span class="string">&#x27;newInfo&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person2收到消息&#x27;</span> + e.type+ <span class="string">&#x27;的消息,消息内容是&#x27;</span>+e.args.info)</span><br><span class="line">&#125;)</span><br><span class="line">person2.register(<span class="string">&#x27;userInfo&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person3收到消息&#x27;</span> + e.type+ <span class="string">&#x27;的消息,消息内容是&#x27;</span>+e.args.info)</span><br><span class="line">&#125;)</span><br><span class="line">msgCenter.fire(<span class="string">&#x27;carInfo&#x27;</span>,&#123;<span class="attr">info</span>:<span class="string">&#x27;新款汽车要上市呀&#x27;</span>&#125;)</span><br><span class="line">msgCenter.fire(<span class="string">&#x27;newInfo&#x27;</span>,&#123;<span class="attr">info</span>:<span class="string">&#x27;重大新闻&#x27;</span>&#125;)</span><br><span class="line">msgCenter.fire(<span class="string">&#x27;userInfo&#x27;</span>,&#123;<span class="attr">info</span>:<span class="string">&#x27;来啦一个新人&#x27;</span>&#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="2-策略模式"   >          <a href="#2-策略模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h4>      </li><li>将算法封装到类里，在使用时，客户端自行选择需要的算法，像STL里封装的sort,find等。</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formStrategy = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> strategy = &#123;</span><br><span class="line"><span class="attr">notEmpty</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value.length ? <span class="string">&#x27;&#x27;</span>: <span class="string">&#x27;请填写内容&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">isNumber</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> reg= <span class="regexp">/^[0-9]+&#123;\.[0-9]+&#125;?$/</span></span><br><span class="line">reg.text(value) ? <span class="string">&#x27;&#x27;</span> + <span class="string">&#x27;请填写一个数字&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">validate</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type,value</span>)</span>&#123;</span><br><span class="line">value = value.replace(<span class="regexp">/^\s+|\s+$/</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">stragegry[type] ? stragegry[type][value]:<span class="string">&#x27;没有这个检测方法&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">addStrategy</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strategy[type])&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;方法已经存在&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">strategry[type] = fn</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oInput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = formStrategy.validate(<span class="string">&#x27;notEmpty&#x27;</span>,<span class="built_in">this</span>.value) || formStrategy.validate(<span class="string">&#x27;isNumber&#x27;</span>,<span class="built_in">this</span>.value) || <span class="string">&#x27;通过检测&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3-链模式"   >          <a href="#3-链模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-链模式" class="headerlink" title="3.链模式"></a>3.链模式</h4>      <ul><li>链模式是实现链式调用的主要方法，通过在自身方法中返回自身的方法，在一个对象连续多次调用自身方法是可以简化写法。</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">b</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.b().c())</span><br></pre></td></tr></table></div></figure>        <h4 id="3-委托模式y"   >          <a href="#3-委托模式y" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-委托模式y" class="headerlink" title="3.委托模式y"></a>3.委托模式y</h4>      <ul><li>当多个对象需要处理同一请求时，可以将这些请求交由另一个对象同一处理。</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>aaaaaaaaaaaaa<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">oUl.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> e = e || <span class="built_in">window</span>.event</span><br><span class="line">target = e.target || e.srcElement</span><br><span class="line"><span class="keyword">if</span>(target.nodeName.toLowerCase() === <span class="string">&#x27;li&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(target.innerHTML)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>)y</span><br><span class="line">oLi.innerHtml = <span class="string">&#x27;eeee&#x27;</span></span><br><span class="line">oul.appendchild(oLi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="4-数据访问对象模式"   >          <a href="#4-数据访问对象模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-数据访问对象模式" class="headerlink" title="4.数据访问对象模式"></a>4.数据访问对象模式</h4>      <ul><li>数据访问对象主要是用来抽象和封装一个对象来对数据源进行访问和存储，这样可以方便对数据的管理，以及避免数据间的重复，覆盖等问题出现</li><li>数据访问对象<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DataVisitor = <span class="function"><span class="keyword">function</span>(<span class="params">nameSpace,splitSign</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.nameSpace = nameSpace;</span><br><span class="line"><span class="built_in">this</span>.splitSign = splitSign || <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">DataVisitor.prototype = &#123;</span><br><span class="line"><span class="attr">status</span>: &#123;</span><br><span class="line"><span class="attr">SUCCESS</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">FAILURE</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">OVERFLOWER</span>:<span class="number">2</span>,</span><br><span class="line"><span class="attr">TIMEOUT</span>:<span class="number">3</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getKey</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.nameSpace + <span class="built_in">this</span>.splitSign + key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key,value,cbFn,expireTime</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> status = <span class="built_in">this</span>.status.SUCCESS</span><br><span class="line">key = <span class="built_in">this</span>.getKey(key)</span><br><span class="line">expireTime = <span class="keyword">typeof</span> expireTime === <span class="string">&#x27;number&#x27;</span>? expireTime + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() : -<span class="number">1</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.localStorage.setItem(key,expireTime + <span class="built_in">this</span>.splitSign + value)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">status = <span class="built_in">this</span>.status.OVERFLOWER</span><br><span class="line">&#125;</span><br><span class="line">cbFn &amp;&amp; cbFn.call(<span class="built_in">this</span>,status,key,vlaue)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key,cbFn</span>)</span>&#123;</span><br><span class="line">key = <span class="built_in">this</span>.getkey(key)</span><br><span class="line"><span class="keyword">var</span> Status = <span class="built_in">this</span>.status.SUCCESS</span><br><span class="line"><span class="keyword">var</span> value = <span class="built_in">window</span>.localStorage.getItem(key)</span><br><span class="line"><span class="keyword">if</span>(value)&#123;</span><br><span class="line"><span class="keyword">var</span> index = value.indexOf(<span class="built_in">this</span>.splitSign)</span><br><span class="line">time = value.slice(<span class="number">0</span>,index)</span><br><span class="line"><span class="keyword">if</span>(time &gt; <span class="keyword">new</span> Data().getTime() || time == -<span class="number">1</span>)&#123;</span><br><span class="line">value = value.slice(index + <span class="built_in">this</span>.splitSign.length)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">value = <span class="literal">null</span></span><br><span class="line">status = <span class="built_in">this</span>.status.TIMEOUT</span><br><span class="line"><span class="built_in">window</span>.localStorage.removeItem(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">status = <span class="built_in">this</span>.status.FAILURE</span><br><span class="line">&#125;</span><br><span class="line">cbFn &amp;&amp; cbFn.call(<span class="built_in">this</span>,status,key,value)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">remove</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key,cbFn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> status = <span class="built_in">this</span>.status.FAILURE</span><br><span class="line">key = <span class="built_in">this</span>.getKey(key)</span><br><span class="line"><span class="keyword">if</span>(value)&#123;</span><br><span class="line">value.slice(value.indexOf(<span class="built_in">this</span>.splitSign) + <span class="built_in">this</span>.splitSign.length);</span><br><span class="line"><span class="built_in">window</span>.localStorage.removeItem(key)</span><br><span class="line">status = <span class="built_in">this</span>.status.SUCCESS</span><br><span class="line">&#125;</span><br><span class="line">cbFn &amp;&amp; cbFn.call(<span class="built_in">this</span>,status,key,vlaue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> learnInPro = <span class="keyword">new</span> DataVisitor (<span class="string">&#x27;learnInPro&#x27;</span>)</span><br><span class="line">learnInPro.set(<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">status,key,value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(status,key,value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure></li></ul>        <h4 id="5-等待者模式"   >          <a href="#5-等待者模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-等待者模式" class="headerlink" title="5.等待者模式"></a>5.等待者模式</h4>      <ul><li>通过对多个异步进程的监听，对未来事件进行统一管理</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// waiter.when(异步事件1、异步事件2...).done(fn).fail(fn)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Waiter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//用来存放异步事件</span></span><br><span class="line"><span class="keyword">var</span> dfd = []</span><br><span class="line"><span class="comment">//用来存放done成功之后的回调</span></span><br><span class="line"><span class="keyword">var</span> doneArr = []</span><br><span class="line"><span class="comment">//用来存放done失败之后的回调</span></span><br><span class="line"><span class="keyword">var</span> failArr = []</span><br><span class="line"><span class="built_in">this</span>.when = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取arguments 是一个类数组对象</span></span><br><span class="line">dfd = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = dfd.length -<span class="number">1</span> ,i &gt;=<span class="number">0</span>,i++)&#123;</span><br><span class="line"><span class="keyword">var</span> d = dfd[i];</span><br><span class="line"><span class="keyword">if</span>(d || d.rejected || d.resolved || (d <span class="keyword">instanceof</span> Defer))&#123;</span><br><span class="line">dfd.splice(i,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.done = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice(<span class="built_in">arguments</span>)</span><br><span class="line">doneArr = doneArr.concat(args)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.fail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice(<span class="built_in">arguments</span>)</span><br><span class="line">doneArr = failArr.concat(args)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.Defered = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Defer()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Defer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//状态值</span></span><br><span class="line"><span class="built_in">this</span>.resolve = <span class="literal">false</span></span><br><span class="line"><span class="built_in">this</span>.reject = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">Defer.prototype = &#123;</span><br><span class="line"><span class="attr">resolve</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.resolved = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; dfd.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfd[i].resolved)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果全部完成，就不会被return出去，则可执行下面的语句</span></span><br><span class="line"><span class="comment">//执行回调函数</span></span><br><span class="line">_exec(doneArr)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">reject</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.rejected = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 执行失败的回调</span></span><br><span class="line">_exec(failArr)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_exec</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">arr[i] &amp;&amp; arr[i]()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> waiter = <span class="keyword">new</span> Waiter();</span><br><span class="line"><span class="keyword">var</span> async1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> dfd = waiter.Defered()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;async1 done&#x27;</span>)</span><br><span class="line">dfd.resolve();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">return</span> dfd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> async2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> dfd = waiter.Defered()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;async2 done&#x27;</span>)</span><br><span class="line">dfd.resolve();</span><br><span class="line">dfd.reject()</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">return</span> dfd</span><br><span class="line">&#125;</span><br><span class="line">waiter.when(async1(),async2())</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;迭代器模式、中介者模式、观察者模式、访问者模式、职责链模式、策略模式、发布/订阅模式&lt;/strong&gt;&lt;/p&gt;

        &lt;h4 id=&quot;1-观察者模式&quot;   &gt;
          &lt;a href=&quot;#1-观察者模式&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-观察者模式&quot; class=&quot;headerlink&quot; title=&quot;1. 观察者模式&quot;&gt;&lt;/a&gt;1. 观察者模式&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;定义一个主体和众多个体，主体为消息中心，里面有各种各样的消息，众多的个体可以订阅不同的消息，当未来中心发布某条消息时，订阅过他的个体就会得到通知。</summary>
    
    
    
    
    <category term="结构与算法" scheme="https://lovepink527.github.io/tags/%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>js手写</title>
    <link href="https://lovepink527.github.io/2021/11/30/js%E6%89%8B%E5%86%99/"/>
    <id>https://lovepink527.github.io/2021/11/30/js%E6%89%8B%E5%86%99/</id>
    <published>2021-11-30T02:58:10.000Z</published>
    <updated>2022-03-04T02:52:23.060Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1-多种方式实现数组去重、扁平化、对比优缺点"   >          <a href="#1-多种方式实现数组去重、扁平化、对比优缺点" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-多种方式实现数组去重、扁平化、对比优缺点" class="headerlink" title="1.多种方式实现数组去重、扁平化、对比优缺点"></a>1.多种方式实现数组去重、扁平化、对比优缺点</h4>      <p><strong>数组去重</strong></p><ol><li>set和from<span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">43</span>,<span class="number">23</span>,<span class="number">43</span>,<span class="number">68</span>,<span class="number">12</span>];</span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"><span class="built_in">console</span>.log(item);<span class="comment">//结果输出的是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Array.from转成数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">43</span>,<span class="number">23</span>,<span class="number">43</span>,<span class="number">68</span>,<span class="number">12</span>];</span><br><span class="line"><span class="keyword">let</span> item = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line"><span class="built_in">console</span>.log(item);<span class="comment">// [12, 43, 23, 68]</span></span><br></pre></td></tr></table></div></figure></li><li>set和…</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">43</span>,<span class="number">23</span>,<span class="number">43</span>,<span class="number">68</span>,<span class="number">12</span>];</span><br><span class="line"><span class="keyword">let</span> item = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(item);<span class="comment">//[12, 43, 23, 68]</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li>indexOf</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">2</span>   <span class="keyword">var</span> newArr = []</span><br><span class="line"><span class="number">3</span>   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="number">4</span>     <span class="keyword">if</span> (newArr.indexOf(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="number">5</span>       newArr.push(arr[i])</span><br><span class="line"><span class="number">6</span>     &#125;</span><br><span class="line"><span class="number">7</span>   &#125;</span><br><span class="line"><span class="number">8</span>   <span class="built_in">console</span>.log(newArr) <span class="comment">// 结果：[2, 8, 5, 0, 6, 7]</span></span><br></pre></td></tr></table></div></figure><p><strong>数组扁平化</strong>：是指将一个多维数组变为一维数组</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]  ------&gt;    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></div></figure><p><strong>思路：</strong>遍历数组arr，若arr[i]为数组则递归遍历，直至arr[i]不为数组然后与之前的结果concat。</p><ol><li> 遍历数组每一项，若值为数组则递归遍历，否则concat。</li></ol><ul><li>reduce是数组的一种方法，它接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result, item</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result.concat(<span class="built_in">Array</span>.isArray(item) ? flatten(item) : item);</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul><p>2)调用数组的toString方法，将数组变为字符串然后再用split分割还原为数组</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.toString().split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure><ol start="3"><li>和上面的toString一样，join也可以将数组转换为字符串</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="4"><li>递归</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">            res = res.concat(flatten(item));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>5） 扩展运算符：es6的扩展运算符能将二维数组变为一维</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">        arr = [].concat(...arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr>        <h4 id="2-多种方式实现深拷贝、对比优缺点"   >          <a href="#2-多种方式实现深拷贝、对比优缺点" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-多种方式实现深拷贝、对比优缺点" class="headerlink" title="2.多种方式实现深拷贝、对比优缺点"></a>2.多种方式实现深拷贝、对比优缺点</h4>      <p><strong>数组浅拷贝</strong>：// 浅拷贝,拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用</p><ul><li>还有浅拷贝数组的话可以利用，<strong>splice() 和 slice() <strong>这两个方法。他们的区别一个是</strong>splice</strong>可以改变数组本身，<strong>slice</strong>不能改变数组本身。</li><li> **Array.from() **方法从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例。</li></ul><p><strong>数组深拷贝</strong>：// 深拷贝，遍历到到每一项都是值类型时可以直接赋值.<br>1)</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b =[]</span><br><span class="line">a.forEach(<span class="function"><span class="params">val</span> =&gt;</span> b.push(val));b.push(<span class="string">&#x27;change&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a:&#x27;</span>+a,<span class="string">&#x27;b:&#x27;</span>+b)</span><br><span class="line"><span class="comment">// 结果VM167:5 a:1,2,3      b:1,2,3,change</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>通过  ** JSON.parse() 和 JSON.stringify()  ** 实现对象的深拷贝。但对于值为 undefined 的值不进行拷贝</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(test));</span><br></pre></td></tr></table></div></figure><ol start="3"><li>递归函数</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objClone = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断obj的子元素是否为object对象，如果是则就递归拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">objClone[key] = deepClone(obj[key])</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不为对象就直接拷贝</span></span><br><span class="line"></span><br><span class="line">objClone[key] = obj[key]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> objClone</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr>        <h4 id="3-手写函数柯里化工具函数、并理解其应用场景和优势"   >          <a href="#3-手写函数柯里化工具函数、并理解其应用场景和优势" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-手写函数柯里化工具函数、并理解其应用场景和优势" class="headerlink" title="3.手写函数柯里化工具函数、并理解其应用场景和优势"></a>3.手写函数柯里化工具函数、并理解其应用场景和优势</h4>      <ul><li>在计算机科学中，<strong>柯里化</strong>（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术以逻辑学家 Haskell Curry 命名的。</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个接受3个参数的函数</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收一个单一参数</span></span><br><span class="line"><span class="keyword">const</span> curryingAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 并且返回接受余下的参数的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用add</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用curryingAdd</span></span><br><span class="line">curryingAdd(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 看得更清楚一点，等价于下面</span></span><br><span class="line"><span class="keyword">const</span> fn = curryingAdd(<span class="number">1</span>)</span><br><span class="line">fn(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></div></figure><p>//手写柯里化工具函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断参数个数是不是等于原函数参数个数</span></span><br><span class="line">  <span class="comment">// 如果是，直接返回调用结果</span></span><br><span class="line">  <span class="keyword">if</span> ([...args].length &gt;= fn.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn(...args);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不是，则返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...params</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 将前面传的全部参数传给curry，回到第一步的if判断，直到参数个数满足要求</span></span><br><span class="line">      <span class="keyword">return</span> curry(fn, ...args, ...params);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr>        <h4 id="4-手写防抖和节流工具函数、并理解其内部原理和应用场景"   >          <a href="#4-手写防抖和节流工具函数、并理解其内部原理和应用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-手写防抖和节流工具函数、并理解其内部原理和应用场景" class="headerlink" title="4.手写防抖和节流工具函数、并理解其内部原理和应用场景"></a>4.手写防抖和节流工具函数、并理解其内部原理和应用场景</h4>      <p><strong>节流(throttle)</strong></p><ul><li>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</li><li><strong>场景：</strong>scroll滚动事件，每隔特定描述执行回调函数input输入框，每个特定时间发送请求或是展开下拉列表</li><li>节流重在加锁** flag = false**</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>,</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(context,args)</span><br><span class="line">            flag = <span class="literal">true</span></span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>防抖(debounce)</strong></p><ul><li>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</li><li><strong>场景：</strong>浏览器窗口大小resize避免次数过于频繁登录、发短信等按钮避免发送多次请求、文本编辑器实时保存</li><li>防抖重在清零 ** clearTimeout(timer)**</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn.apply(context,args)</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>总结</strong></p><ul><li>函数节流：是确保函数特定的时间内至多执行一次。 函数防抖：是函数在特定的时间内不被再调用后执行。</li></ul><hr>        <h4 id="5-实现一个sleep函数"   >          <a href="#5-实现一个sleep函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-实现一个sleep函数" class="headerlink" title="5.实现一个sleep函数"></a>5.实现一个sleep函数</h4>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(time)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sleep(<span class="number">5000</span>).then(</span><br><span class="line">  <span class="function">(<span class="params">time</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`你睡了<span class="subst">$&#123;time / <span class="number">1000</span>&#125;</span>s，然后做你的事情`</span>) </span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></div></figure>        <h4 id="6-call、apply、bind"   >          <a href="#6-call、apply、bind" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-call、apply、bind" class="headerlink" title="6.call、apply、bind"></a>6.call、apply、bind</h4>      <p><strong>call</strong></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不覆盖原生call方法，起个别名叫myCall，接收this上下文context和参数params</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context, ...params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// context必须是个对象并且不能为null，默认为window</span></span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">typeof</span> context === <span class="string">&quot;object&quot;</span> ? context || <span class="built_in">window</span> : <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">// 为了避免和原有属性冲突，定义一个Symbol类型的属性</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>();</span><br><span class="line">  <span class="comment">// call方法的目的是改变函数的this指向，函数的this指向它的调用者，也就是说我们的目标是改变函数的调用者。</span></span><br><span class="line">  <span class="comment">// 下面的this就是函数本身，给_this增加一个名为[key]的方法指向this，就能用_this来调用this了</span></span><br><span class="line">  _this[key] = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = _this[key](...params);</span><br><span class="line">  <span class="comment">// 获取函数执行结果后，删除以上添加的属性</span></span><br><span class="line">  <span class="keyword">delete</span> _this[key];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><strong>apply</strong>:和call的区别在于第二个参数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.myCall(context, ...params);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><strong>bind</strong>:和call的区别在于不立即执行，返回一个函数即可</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context, ...params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span>;</span><br><span class="line">  <span class="comment">// 返回的函数也能接收参数，但是是放在params后面</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _this.myCall(context, ...[...params, ...args]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-多种方式实现数组去重、扁平化、对比优缺点&quot;   &gt;
          &lt;a href=&quot;#1-多种方式实现数组去重、扁平化、对比优缺点&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-多种方式实现数组去重、扁平化、对比优缺点&quot; class=&quot;headerlink&quot; title=&quot;1.多种方式实现数组去重、扁平化、对比优缺点&quot;&gt;&lt;/a&gt;1.多种方式实现数组去重、扁平化、对比优缺点&lt;/h4&gt;
      &lt;p&gt;&lt;strong&gt;数组去重&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set和from</summary>
    
    
    
    
    <category term="JS" scheme="https://lovepink527.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>react-redux原理</title>
    <link href="https://lovepink527.github.io/2021/11/29/react-redux%E5%8E%9F%E7%90%86/"/>
    <id>https://lovepink527.github.io/2021/11/29/react-redux%E5%8E%9F%E7%90%86/</id>
    <published>2021-11-29T09:20:53.000Z</published>
    <updated>2022-03-04T02:51:29.685Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="简单redux实现"   >          <a href="#简单redux实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单redux实现" class="headerlink" title="简单redux实现"></a>简单redux实现</h3>      <span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer，enhancer</span>)</span>&#123;</span><br><span class="line"><span class="comment">//中间件</span></span><br><span class="line"><span class="keyword">if</span>(enhancer)&#123;</span><br><span class="line"><span class="keyword">return</span> enhancer(createStore)(reducer)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> currentState = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> currentListeners = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> currentState</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">Listener</span>)</span>&#123;</span><br><span class="line">currentListeners.push(listener)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">currentState = reducer(currentState,action)</span><br><span class="line">currentListeners.forEach(<span class="function"><span class="params">v</span>=&gt;</span>v())</span><br><span class="line"><span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;getState,subscribe,dispatch&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//addGun(参数)</span></span><br><span class="line"><span class="comment">//dispatch(addGun(参数))</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">creators,dispatch</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;...args&#125; =&gt; dispatch(creator(...args))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间件</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">createStore</span>=&gt;</span><span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> store = createStore(...arg)</span><br><span class="line"><span class="keyword">let</span> dispatch = store.dispatch</span><br><span class="line"><span class="keyword">const</span> midApi = &#123;</span><br><span class="line"><span class="attr">getState</span>:store.getState,</span><br><span class="line"><span class="attr">dispatch</span>:<span class="function">(<span class="params">...args</span>)=&gt;</span>dispatch(...args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dispatch = middleware(midApi)(store.dispatch)</span></span><br><span class="line">middlewareChain = middlewares.map(<span class="function"><span class="params">middleware</span>=&gt;</span>middleware(midApi))</span><br><span class="line">dispatch= compose(...middlewareChain)(store.dispatch)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...store,</span><br><span class="line">dispatch</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//componse(f1,f2,f3)</span></span><br><span class="line"><span class="comment">//fn1(fn2(fn3))</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funs</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(funs.length ==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span>arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(funcs.length==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> funs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">ret,item</span>)=&gt;</span><span class="function">(<span class="params">...args</span>)=&gt;</span>ret(item(...args)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="title">bindActionCreators</span>(<span class="params">creators,dispatch</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> bound = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> creator = creators[v]</span><br><span class="line">bound[v] = bindActionCreator(creator,dispatch)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="context"   >          <a href="#context" class="heading-link"><i class="fas fa-link"></i></a><a href="#context" class="headerlink" title="context"></a>context</h3>      <ul><li>context是全局的，组件里声明，所以子元素可以直接获取<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sidebar</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">Navbar</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Navbar</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line"><span class="attr">user</span>: PropTypes.string</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;this.context.user&#125;的导航栏</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> childcontextTypes = &#123;</span><br><span class="line"><span class="attr">user</span>: PropTypes.string</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(props)</span><br><span class="line"><span class="built_in">this</span>.state = &#123;<span class="attr">user</span>:<span class="string">&#x27;蜗牛&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">getChildContext</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.state</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是&#123;this.state.user&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="connect"   >          <a href="#connect" class="heading-link"><i class="fas fa-link"></i></a><a href="#connect" class="headerlink" title="connect"></a>connect</h3>      </li><li>connect 负责链接组件，给到redux里的数据放到组件的属性里</li></ul><ol><li>负责接受一个组件，把state里的一些数据放进去，返回一个组件</li><li>数据变化的时候，通知组件<figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">mapStateToProps,mapStateToProps</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">WrapComponent</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> connect = <span class="function">(<span class="params">mapsStateToProps=state=&gt;state,mapDispatchToProps= &#123;&#125;</span>) =&gt;</span><span class="function">(<span class="params">WrapCompoent</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Components</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line"><span class="attr">store</span>:PropTypes.object</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(props,context)</span><br><span class="line"><span class="built_in">this</span>.state = &#123;</span><br><span class="line"><span class="attr">props</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;store&#125; = <span class="built_in">this</span>.store</span><br><span class="line">store.subscribe(<span class="function">()=&gt;</span><span class="built_in">this</span>.update())</span><br><span class="line"><span class="built_in">this</span>.update()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取mapStoreToProps,mapdispatchToProps放入this.props里</span></span><br><span class="line"><span class="keyword">const</span> &#123;store&#125; = <span class="built_in">this</span>.context</span><br><span class="line"><span class="keyword">const</span> stateProps = mapStateToProps(store.getState())</span><br><span class="line"><span class="comment">//方法不能直接给，因为需要dispatch</span></span><br><span class="line"><span class="comment">//直接执行addGun()毫无意义</span></span><br><span class="line"><span class="comment">//要addGun = () =&gt;store.dispatch(addGun()) 才有意义，其实就是用dispatch把action包啦一层</span></span><br><span class="line"><span class="keyword">const</span> dispatchProps = bindActionCreators(mapDispatchToProps,store.dispatch)</span><br><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">...this.state.props,</span><br><span class="line">...stateProps,</span><br><span class="line">...dispatchProps</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &lt;WrapComponent&gt;&#123;...this.state.props&#125;&lt;/Wrapcomponent&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="provider"   >          <a href="#provider" class="heading-link"><i class="fas fa-link"></i></a><a href="#provider" class="headerlink" title="provider"></a>provider</h3>      </li></ol><ul><li>provider,把store放到context里，所以的子元素可以直接取到store</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line"><span class="attr">store</span>: PropTypes.object</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">getChildContext</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">store</span>:<span class="built_in">this</span>.store&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(props,context)</span><br><span class="line"><span class="built_in">this</span>.store = props.store</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.props.children</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="thunk"   >          <a href="#thunk" class="heading-link"><i class="fas fa-link"></i></a><a href="#thunk" class="headerlink" title="thunk"></a>thunk</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayThunk = <span class="function">(<span class="params">&#123;dispatch,getState&#125;</span>) =&gt;</span><span class="function"><span class="params">next</span>=&gt;</span><span class="function"><span class="params">action</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//如果是函数，执行一下，参数dispatch和getState</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray)&#123;</span><br><span class="line"><span class="keyword">return</span> action.forEach(<span class="function"><span class="params">v</span>=&gt;</span>next(v))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不符合我们的要求，直接调用下一个中间件，使用next</span></span><br><span class="line"><span class="comment">//如果符合我们的要求，需要重新dispatch,调用dispatch即可</span></span><br><span class="line"><span class="comment">//if(typeof action ==&#x27;function&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//return action(dispatch,getState)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//默认什么也没干</span></span><br><span class="line"><span class="keyword">return</span> next(action)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;简单redux实现&quot;   &gt;
          &lt;a href=&quot;#简单redux实现&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#简单redux实现&quot; class=&quot;headerlink&quot; title=&quot;简单redux实现&quot;&gt;&lt;/a&gt;简单redux实现&lt;/h3&gt;</summary>
    
    
    
    
    <category term="REACT" scheme="https://lovepink527.github.io/tags/REACT/"/>
    
  </entry>
  
  <entry>
    <title>react-redux基础</title>
    <link href="https://lovepink527.github.io/2021/11/29/react-redux%E5%9F%BA%E7%A1%80/"/>
    <id>https://lovepink527.github.io/2021/11/29/react-redux%E5%9F%BA%E7%A1%80/</id>
    <published>2021-11-29T06:44:22.000Z</published>
    <updated>2022-03-04T02:49:10.495Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Redux状态管理，单一状态，单向数据流</li><li>核心概念： store,state,action,reducer</li><li>store保存所有状态,那里都有记录state</li><li>需要改变得时候，需要告诉专员dispatch要干什么action</li><li>处理变化得人reducer拿到state和action,生成新的state</li><li>首先通过reducer新建store,随时通过store.getState获取状态</li><li>需要状态变更，store.dispatch(action) 来修改状态</li><li>reducer函数接收state和action,返回新的state,可以用store.subscribe监听每次修改<span id="more"></span><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">npm i redux --save</span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//根据老的state和action生成新的state</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state=<span class="number">0</span>,action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;加机关枪&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state+<span class="number">1</span>,</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. 新建store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br><span class="line"><span class="keyword">const</span> init = store.getState()</span><br><span class="line"><span class="comment">//监听state</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> current = store.getState()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`现在有机关枪<span class="subst">$&#123;current&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//订阅监听</span></span><br><span class="line">store.subscribe(listener)</span><br><span class="line"><span class="comment">// 派发事件，传递action</span></span><br><span class="line">store.dispath(&#123;<span class="attr">type</span>: <span class="string">&#x27;加机关枪&#x27;</span>&#125;)</span><br></pre></td></tr></table></div></figure>        <h6 id="redux和react一起用"   >          <a href="#redux和react一起用" class="heading-link"><i class="fas fa-link"></i></a><a href="#redux和react一起用" class="headerlink" title="redux和react一起用"></a>redux和react一起用</h6>      </li><li>把store.dispatch方法传递给组件，内部可以调用修改状态</li><li>subscribe订阅render函数，每次修改都重新渲染</li><li>redux相关内容，移动单独的文件index.redux.js单独管理</li></ul>        <h6 id="处理异步"   >          <a href="#处理异步" class="heading-link"><i class="fas fa-link"></i></a><a href="#处理异步" class="headerlink" title="处理异步"></a>处理异步</h6>      <ul><li><p>插件redux-thunk插件<br>npm install redux-devtools-extension<br>npm install redux-thunk –save</p></li><li><p>使用applyMiddleware开启thunk中间件</p></li><li><p>action可以返回函数，使用dispatch提交action</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addGunAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        dispatch(addGun())</span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 浏览器插件</span></span><br><span class="line">  <span class="keyword">const</span> store = createStore(counter,compose(</span><br><span class="line">    applyMiddleware(thunk),</span><br><span class="line">    <span class="built_in">window</span>.devToolsExtension?<span class="built_in">window</span>.devToolsExtension(): <span class="function"><span class="params">f</span>=&gt;</span>f</span><br><span class="line">  ))</span><br></pre></td></tr></table></div></figure>        <h6 id="使用react-redux"   >          <a href="#使用react-redux" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用react-redux" class="headerlink" title="使用react-redux"></a>使用react-redux</h6>      </li><li><p>npm install react-redux – save</p></li><li><p>忘记subscribe，记住reducer,action和dispatch即可</p></li><li><p>react-redux提供Provider和connect两个接口来链接</p></li><li><p>Provider组件在应用最外层，传入store即可，只用一次</p></li><li><p>connect负责从外部获取组件需要的参数</p></li><li><p>connect可以用装饰器的方式来写</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line">ReactDom.render(</span><br><span class="line">  (&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">  &lt;Provider&gt;)</span><br><span class="line">)</span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="built_in">this</span>.props.num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>现在有机关枪&#123;num&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addGun&#125;</span>&gt;</span>申请武器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">mapStatetoProps</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">num</span>: state&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actionCreators = &#123;addGun,removeGun,addGunAsync&#125;</span><br><span class="line">App = connect(mapStatetoProps,actionCreators)(App)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Redux状态管理，单一状态，单向数据流&lt;/li&gt;
&lt;li&gt;核心概念： store,state,action,reducer&lt;/li&gt;
&lt;li&gt;store保存所有状态,那里都有记录state&lt;/li&gt;
&lt;li&gt;需要改变得时候，需要告诉专员dispatch要干什么action&lt;/li&gt;
&lt;li&gt;处理变化得人reducer拿到state和action,生成新的state&lt;/li&gt;
&lt;li&gt;首先通过reducer新建store,随时通过store.getState获取状态&lt;/li&gt;
&lt;li&gt;需要状态变更，store.dispatch(action) 来修改状态&lt;/li&gt;
&lt;li&gt;reducer函数接收state和action,返回新的state,可以用store.subscribe监听每次修改</summary>
    
    
    
    
    <category term="REACT" scheme="https://lovepink527.github.io/tags/REACT/"/>
    
  </entry>
  
  <entry>
    <title>手写css效果</title>
    <link href="https://lovepink527.github.io/2021/11/26/%E6%89%8B%E5%86%99html-css%E6%95%88%E6%9E%9C/"/>
    <id>https://lovepink527.github.io/2021/11/26/%E6%89%8B%E5%86%99html-css%E6%95%88%E6%9E%9C/</id>
    <published>2021-11-26T08:54:15.000Z</published>
    <updated>2022-03-04T03:07:40.705Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1-手写图片瀑布流效果"   >          <a href="#1-手写图片瀑布流效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-手写图片瀑布流效果" class="headerlink" title="1.手写图片瀑布流效果"></a>1.手写图片瀑布流效果</h4>      <p><img   src="https://img-blog.csdnimg.cn/f824c249357c48218532d70d6bb1beb9.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;"  alt="在这里插入图片描述"></p><span id="more"></span><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box_img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/u=1141339595,1371712305&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box_img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/u=1215663945,2777624973&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box_img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/u=1464279625,3638714393&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box_img</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box_img</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取容器宽度</span></span><br><span class="line">    <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> contentWidth = content.offsetWidth</span><br><span class="line">    <span class="comment">//2.获取单个图片的宽度</span></span><br><span class="line">    <span class="keyword">var</span> imgs = content.children</span><br><span class="line">    <span class="keyword">var</span> imgsWidth = imgs[<span class="number">0</span>].offsetWidth</span><br><span class="line">    <span class="comment">//3.第一行可以排列多少张图片</span></span><br><span class="line">    <span class="keyword">var</span> nums = <span class="built_in">Math</span>.floor(contentWidth/imgsWidth)</span><br><span class="line">    <span class="comment">//4. 收集第一排的所有图片高度</span></span><br><span class="line">    <span class="keyword">var</span> arrHeight = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;imgs.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;nums)&#123;<span class="comment">//这里都是第一行的高度</span></span><br><span class="line">            <span class="comment">//把第一行的高度放入arrHeight中</span></span><br><span class="line">            arrHeight.push(imgs[i].offsetHeight)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//创建第一个元素的对象</span></span><br><span class="line">            <span class="keyword">var</span> obj = &#123;</span><br><span class="line">                <span class="attr">minH</span>:arrHeight[<span class="number">0</span>],</span><br><span class="line">                <span class="attr">minI</span>: <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找出最小的高度的图片</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arrHeight.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arrHeight[j]&lt;obj.minH)&#123;</span><br><span class="line">                    obj.minH = arrHeight[j]</span><br><span class="line">                    obj.minI = j</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            imgs[i].style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">            imgs[i].style.left = imgs[obj.minI].offsetLeft + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">            imgs[i].style.top = arrHeight[obj.minI] + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">            arrHeight[obj.minI] = arrHeight[obj.minI] + imgs[i].offsetHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2-使用CSS绘制几何图形（圆形、三角形、扇形、菱形等）"   >          <a href="#2-使用CSS绘制几何图形（圆形、三角形、扇形、菱形等）" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-使用CSS绘制几何图形（圆形、三角形、扇形、菱形等）" class="headerlink" title="2.使用CSS绘制几何图形（圆形、三角形、扇形、菱形等）"></a>2.使用CSS绘制几何图形（圆形、三角形、扇形、菱形等）</h4>      <figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//圆形</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;circle&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line">//扇形</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;sector&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.sector</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">80px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">//三角形</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-id">#triangle-up</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">//菱形</span><br><span class="line"><span class="selector-class">.rhombus</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>)<span class="built_in">skew</span>(<span class="number">30deg</span>,<span class="number">30deg</span>);</span><br><span class="line">            <span class="attribute">background</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="3-使用纯CSS实现曲线运动（贝塞尔曲线）"   >          <a href="#3-使用纯CSS实现曲线运动（贝塞尔曲线）" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-使用纯CSS实现曲线运动（贝塞尔曲线）" class="headerlink" title="3.使用纯CSS实现曲线运动（贝塞尔曲线）"></a>3.使用纯CSS实现曲线运动（贝塞尔曲线）</h4>              <h4 id="4-实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点"   >          <a href="#4-实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点" class="headerlink" title="4.实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点"></a>4.实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点</h4>      <ul><li>两栏布局,左边定宽，右边自适应</li></ul><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>三栏布局,圣杯布局、双飞翼布局</li><li>圣杯布局<figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li></ul><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#container</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>双飞翼布局的实现<br>left、center、right三种都设置左浮动<br>设置center宽度为100%<br>设置负边距，left设置负边距为100%，right设置负边距为自身宽度<br>设置content的margin值为左右两个侧栏留出空间，margin值大小为left和right宽度</li><li>吸顶</li></ul><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: -webkit-sticky;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-手写图片瀑布流效果&quot;   &gt;
          &lt;a href=&quot;#1-手写图片瀑布流效果&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#1-手写图片瀑布流效果&quot; class=&quot;headerlink&quot; title=&quot;1.手写图片瀑布流效果&quot;&gt;&lt;/a&gt;1.手写图片瀑布流效果&lt;/h4&gt;
      &lt;p&gt;&lt;img   src=&quot;https://img-blog.csdnimg.cn/f824c249357c48218532d70d6bb1beb9.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,x_16&quot; style=&quot;width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBA5aec5oWn5oWn,size_20,color_FFFFFF,t_70,g_se,px;&quot;  alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSS" scheme="https://lovepink527.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>编译原理</title>
    <link href="https://lovepink527.github.io/2021/11/26/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://lovepink527.github.io/2021/11/26/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2021-11-26T07:53:06.000Z</published>
    <updated>2022-03-04T02:45:54.325Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="编译原理"   >          <a href="#编译原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h4>      <ul><li>编译原理即是对高级程序语言进行翻译的一门科学技术, 我们都知道计算机程序由程序语言编写而成, 在早期计算机程序语言发展较为缓慢, 因为计算机存储的数据和执行的程序都是由0、1代码组合而成的, 那么在早期程序员编写计算机程序时必须十分了解计算机的底层指令代码通过将这些微程序指令组合排列从而完成一个特定功能的程序, 这就对程序员的要求非常高了。人们一直在研究如何如何高效的开发计算机程序, 使编程的门槛降低。<span id="more"></span>        <h5 id="1-理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序"   >          <a href="#1-理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序" class="headerlink" title="1.理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序"></a>1.理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序</h5>      </li><li>代码就是程序员用开发工具所支持的语言写出来的源文件，是一组由字符、符号或信号码元以离散形式表示信息的明确的规则体系。代码设计的原则包括唯一确定性、标准化和通用性、可扩充性与稳定性、便于识别与记忆、力求短小与格式统一以及容易修改等。</li><li></li></ul>        <h5 id="2-正则表达式的匹配原理和性能优化"   >          <a href="#2-正则表达式的匹配原理和性能优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-正则表达式的匹配原理和性能优化" class="headerlink" title="2.正则表达式的匹配原理和性能优化"></a>2.正则表达式的匹配原理和性能优化</h5>      <p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/wangrd/p/7073885.html" >匹配原理和性能优化</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h5 id="3-如何将JavaScript代码解析成抽象语法树-AST"   >          <a href="#3-如何将JavaScript代码解析成抽象语法树-AST" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-如何将JavaScript代码解析成抽象语法树-AST" class="headerlink" title="3.如何将JavaScript代码解析成抽象语法树(AST)"></a>3.如何将JavaScript代码解析成抽象语法树(AST)</h5>      <p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/fundebug/p/how-does-javascript-compile.html" >javascript代码解析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h5 id="4-base64的编码原理"   >          <a href="#4-base64的编码原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-base64的编码原理" class="headerlink" title="4.base64的编码原理"></a>4.base64的编码原理</h5>      <ul><li>Base64中的64表示的是0-16 A-Z a-z 和+ / 一共64个字符</li><li>Base64是一种编码方式，而并非加密，这种编码因为采用的64种基础字符（可见字符）所以可以全世界通用，大家都认可这一套编码规范</li><li>这边编码方式  最小000000 最大111111 转换为10进制 0-63 一共64个数字</li></ul><p>5.几种进制的相互转换计算方法，在JavaScript中如何表示和转换</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一、2,8,16进制格式的数据转换到10进制数据</span></span><br><span class="line"><span class="comment">//第一个参数就是需要转换为10进制的数，arg2就是被转换数据的进制值，可以是2,8,16等。</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="built_in">parseInt</span>(arg1,arg2);</span><br><span class="line"><span class="comment">//二、将10进制格式的数据转为2,8,16进制格式数据</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="built_in">parseInt</span>(“<span class="number">217</span>”);<span class="comment">//如果这个数是字符串格式的，需要执行这一步</span></span><br><span class="line"><span class="keyword">var</span> oxNum=num.toString(<span class="number">16</span>);<span class="comment">//参数可以是2,8,16.设置转换10进制数据到对应进制格式，本例是将num转成16进制数据  oxNum=d9</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;编译原理&quot;   &gt;
          &lt;a href=&quot;#编译原理&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#编译原理&quot; class=&quot;headerlink&quot; title=&quot;编译原理&quot;&gt;&lt;/a&gt;编译原理&lt;/h4&gt;
      &lt;ul&gt;
&lt;li&gt;编译原理即是对高级程序语言进行翻译的一门科学技术, 我们都知道计算机程序由程序语言编写而成, 在早期计算机程序语言发展较为缓慢, 因为计算机存储的数据和执行的程序都是由0、1代码组合而成的, 那么在早期程序员编写计算机程序时必须十分了解计算机的底层指令代码通过将这些微程序指令组合排列从而完成一个特定功能的程序, 这就对程序员的要求非常高了。人们一直在研究如何如何高效的开发计算机程序, 使编程的门槛降低。</summary>
    
    
    
    
    <category term="计算机基础" scheme="https://lovepink527.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
